<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Auth on X blog</title>
    <link>http://dmdgeeker.com/tags/auth/</link>
    <description>Recent content in Auth on X blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Sun, 28 Aug 2016 14:36:06 +0800</lastBuildDate>
    
	<atom:link href="http://dmdgeeker.com/tags/auth/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两步验证(2-step verification)</title>
      <link>http://dmdgeeker.com/post/two-factor-verify/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%812-step-verification/</link>
      <pubDate>Sun, 28 Aug 2016 14:36:06 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/two-factor-verify/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%812-step-verification/</guid>
      <description>关于两步验证 两步验证是一种安全措施，用于保护某些资源不被泄露，即使在泄露了密码的情况下。 两步验证有多种方式，主要包括：短信、验证器、电话等方式。本文主要讲述验证器方式的两步验证。
工作原理 使用基于验证器方式的两步验证通常需要另外一部设备（通常是手机，也可能是其它硬件）。 用户在登录系统时，除了输入正常的密码外，还需要输入一个动态生成的密码。 此动态密码由另外一部可信设备提供，具有一个较短的时效性，保证不会重回攻击。
动态密码生成通常有两种算法：TOTP与HOTP。
TOTP(Time-Based One-Time Password)是指基于时间的一次性密码。
HOTP(HMAC-based One-time Password)是指基于计数的一次性密码。
安全令牌硬件（如某些银行的动态密保，游戏账号的密码令牌）通常是基于HOTP方式实现。 其表现为使用专有硬件，为某一特定产品或系统服务。
而当前大多数两步验证使用的是TOTP方式实现，比如Google Authenticator。
TOTP流程 基于TOTP的两步验证流程一般通过需要先绑定，然后随用随验证。
现假设有一系统S，用户A进行两步验证
绑定流程一般如下：
 用户A注册/登录系统S后，S后台生成一个OTP链接，在前端生成并显示该链接的二维码
 用户A用手机通过Google Authenticator之类的验证器G扫描二维码进行绑定 验证器G会生成动态密码C，用户A将动态密码C输入到系统S的绑定验证框内 如果系统S后台验证该动态密码C成功，则系统S与验证器G绑定成功。否则，绑定失败。  验证流程如下:
 用户A通过账号密码登录系统S 系统S验证账号和密码匹配后，跳转到两步验证页面 用户A将验证器G里的动态验证码C输入到两步验证页面的验证框中 系统S对验证码C进行验证，如果成功，如登录成功，否则失败  TOTP实现 可以按照上面所述流程，一步步来进行实现。 下面主要介绍几个关键部份。
OTP链接 OTP链接格式: otpauth://TYPE/LABEL?PARAMETERS。 具体可参考Google Authenticator URI
示例：otpauth://totp/Google:alice@google.com?secret=JBSWY3DPEHPK3PXP&amp;amp;issuer=Google
其中，前面一段otpauth://totp/Example:alice@google.com中各部份的意义如下：
 otpauth表示OTP认证协议 totp表示使用TOTP算法 Google表示生成此链接的公司或软件名称 alice@google.com表示该链接所对应的用户的用户名  而后面一段查询参数中各部份意义如下：
 secret是由服务端Base32编码生成的字符串。其内容不重要，只要保证随机性即可，应保证每个用户都拥有一个独立的secret。 issuer表示生成此链接的公司或软件名称，应与前一段中相应部份一致。  动态验证码生成 动态验证码的生成算法是公开的，可以到此处进行查处：RFC6238
下面给出Go语言版本示例:
// 6位数字动态验证码 var digits = 6 // secret 即为otpauth链接中的secret // timeValue 为当前unix时间除以验证码失效时间（通常为30s） func computeCode(secret string, timeValue int64) string { key, err := base32.</description>
    </item>
    
  </channel>
</rss>