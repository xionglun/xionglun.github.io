<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on X blog</title>
    <link>http://dmdgeeker.com/tags/dev/</link>
    <description>Recent content in Dev on X blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Sat, 01 Apr 2017 22:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://dmdgeeker.com/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一次慢请求优化</title>
      <link>http://dmdgeeker.com/post/optimize_golang_slow_request/%E4%B8%80%E6%AC%A1%E6%85%A2%E8%AF%B7%E6%B1%82%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 01 Apr 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/optimize_golang_slow_request/%E4%B8%80%E6%AC%A1%E6%85%A2%E8%AF%B7%E6%B1%82%E4%BC%98%E5%8C%96/</guid>
      <description>前言 最近的项目中，有一个用户数据导入的需求，导入的数据量大致应该是几百条左右。 但是由于每条用户数据都包含有其它子数据，并需要对这些数据进行单一处理，所以 预期处理时间比较长。
在完成接口之后，进行测试，大致在2秒左右可以完成300条左右数据导入，基本符合预期。
由于最近项目上了opentracing这个性能监控工具，所以想找一找倒底是哪里出现处理时间过长的问题。
性能预估 首先预估了一下可能会出现处理慢的两处地方：数据转换、数据存储。
猜测理由：
 数据转换
因为每一条用户数据可能需要10多次处理，每条处理规则可能不同，所以造成总数据处理时间会很长。
 数据存储
因为数据总量比较大，所以入库时候可能会比较慢。由于在应用层进行了数据拼接，所以入库时间应该不会特别慢。但是，可能会出现SQL过长的问题。
  压力测试 首先，对可能出现慢处理的地方做了压力测试。
用户数据转换:
BenchmarkEntry2User 20000	73788 ns/op  可以看到，这里的每一条用户数据转换大概需要的时间为: 73788ns = 73.788µs = 0.073ms，速度非常快。 这里的结果有点出乎意外，本以为会处理比较慢的地方，其实处理非常快。
在相应代码处添加上opentracing的监控代码后，得到请求图如下： 可以看到，请求图上效果与压力测试基本一致，用户转换花费时间并不长。而数据存储入库的时间明显不正常。
猜想优化 由于数据存储时间很长，所以很简单地认为是数据库出现了问题，对数据库进行一系列的优化。 然而，优化之后几乎没有任何效果。由于原数据是拼接而成的，于是猜想可能是SQL过长过大问题导致的。 将SQL改成事务后，依然没有任何积极的效果，反而进一步拉长了存储时间。 分析代码 由于对数据库进行优化没有收到任何效果，让我把目光再一次放到了代码上面。 经过仔细分析，发现了一条可能会比较耗时的操作：
user.Salt = utils.GenSalt() pass := utils.GenPassword() user.Password = utils.EncryptPassword(pass, user.Salt)  这里会对每一个导入的用户随机生成用户密码和盐，然后还有一次加密处理。
对EncryptPassword这个函数进行压测可得:
BenchmarkEncryptPassword 500	3514588 ns/op  由上可知，每一次加密动作耗时为: 3514588ns = 3514.588µs = 3.514588ms。 可知每一次加密需要耗时约3ms，而300个用户耗时可能接近1s。由于测试服务器性能相对于开发机更弱， 所以耗时轻松达到1s以上。至此，问题已然大白。
修正问题 在正确定位问题后，即可对症下药。 经过修改，事务型存储结果如下： 而通过拼接SQL存储结果如下： 其它 本次优化过程中使用到的相关东西：</description>
    </item>
    
    <item>
      <title>gRPC基本使用</title>
      <link>http://dmdgeeker.com/post/grpc/grpc%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 16 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/grpc/grpc%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>通过RPC，客户端的应用程序可以方便地调用另外一台机器上的服务端程序，就像调用本地函数一样。
安装gRPC 标准安装可参考gRPC Install
这里摘录不同语言安装gRPC时的操作
C++ 从源代码编译 C# NuGet包Grpc Go go get google.golang.org/grpc Node npm install grpc PHP pecl install grpc Python pip install grpcio Ruby gem install grpc Java 参考 github.com/grpc/grpc-java Objective-C 参考 github.com/grpc/grpc/tree/master/src/objective-c  默认gRPC使用的是Protocol buffers，所以默认还需要安装protobuf。
如果是Mac操作系统，可以这样同时安装gRPC系列
brew tap grpc/grpc brew install --with-plugins grpc  这样安装的gRPC会同时安装protoc，grpc_cpp_plugin, grpc_node_plugin, grpc_php_plugin, grpc_python_plugin, grpc_csharp_plugin, grpc_objective_c_plugin, grpc_ruby_plugin这些可执行文件。
编写protobuf文件 由于gRPC默认使用protobuf作为传输格式，所以这里需要先编写相应proto文件。示例如下：
syntax = &amp;quot;proto3&amp;quot;; option java_multiple_files = true; option java_package = &amp;quot;io.grpc.examples.hello&amp;quot;; option java_outer_classname = &amp;quot;HelloProto&amp;quot;; option objc_class_prefix = &amp;quot;HL&amp;quot;; package hello; // The greeting service definition.</description>
    </item>
    
    <item>
      <title>Linux定时器</title>
      <link>http://dmdgeeker.com/post/cron/linux%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Wed, 15 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/cron/linux%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>在linux中，定时器一般是使用cron这个系统工具来实现的。 但是，在systemd中也可以使用Timer进行定时控制。
 Cron 在linux下，可以使用crontab -e来编辑修改定时任务(重点在最后一行)
# Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).</description>
    </item>
    
    <item>
      <title>使用rsyslog集中管理日志</title>
      <link>http://dmdgeeker.com/post/rsyslog/%E4%BD%BF%E7%94%A8rsyslog%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/</link>
      <pubDate>Fri, 10 Feb 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/rsyslog/%E4%BD%BF%E7%94%A8rsyslog%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86%E6%97%A5%E5%BF%97/</guid>
      <description>关于syslog Syslog是linux上传统的日志管理工具，而rsyslog是其改进版。很多系统都已将syslog替换为rsyslog进行日志管理了。
Syslog相关知识  Facility设施     代码 名称 描述     0 kern 内核   1 user 用户级   2 mail 邮件   3 daemon 系统   4 auth 安全与授权   5 syslog 守护进程   6 lpr 打印相关   7 news 网络消息   8 uucp uucp子系统   9  时钟   10 authpriv 安全与授权   11 ftp FTP   12 - NTP   13 - 日志审计   14 - 日志报警   15 cron 定时器   16 local0 用户自定义   17 local1 用户自定义   18 local2 用户自定义   19 local3 用户自定义   20 local4 用户自定义   21 local5 用户自定义   22 local6 用户自定义   23 local7 用户自定义     Level级别(重要性从高到低)     代码 级别 名称 描述     0 Emergency emerg 紧急   1 Alert alert 报警   2 Critical crit 关键   3 Error err 错误   4 Warning warn 警告   5 Notice notice 通知   6 Informational info 消息   7 Debug debug 调试    使用rsyslog记录日志 当前很多应用都已支持syslog进行日志记录</description>
    </item>
    
    <item>
      <title>tcpdump 基本使用方法</title>
      <link>http://dmdgeeker.com/post/tcpdump/tcpdump-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 10 Feb 2017 10:00:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/tcpdump/tcpdump-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>基本使用  将捕获到的流量写入到某个文件
# -s 0 表示将完整数据包抓取下来，默认只抓取68字节 # -c 1000 表示抓1000个包, 避免抓取过多的包 # -w 表示写入 tcpdump -s 0 -c 1000 -w filename # 将监听到的输出写入到filename这个文件中  根据网卡来过滤流量
tcpdump -i eth1 # 监听eth1网卡的流量 tcpdump -i docker0 # 监听docker0网卡的流量  根据端口号来过滤
tcpdump tcp port 8080 # 监听本机8080端口TCP通讯 tcpdump udp port 567 # 查看本机某UDP端口567流量 tcpdump src port 25 # 来源端口为25的流量 tcpdump dst port 25 # 目的端口为25的流量 tcpdump -i eth1 src port 25 # 通过网卡eth1且来源端口为25的流量 tcpdump -i eth1 dst port 25 # 通过网卡eth1且目的端口为25的流量  根据源与目的地址过滤</description>
    </item>
    
    <item>
      <title>MySQL 基本操作</title>
      <link>http://dmdgeeker.com/post/mysql/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 01 Jan 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/mysql/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>安装使用 安装 Ubuntu 16.04
sudo apt-get install mysql-server sudo mysql_secure_installation # 生产环境必备，安装一些安全策略  访问mysql mysql -u root -p  其它参数：
 -u username 登陆数据库所使用的数据库用户 -p password 使用密码登陆，如果没指定，则会在下面提示输入 -D database 此次登陆默认使用的数据库  基本操作 mysql&amp;gt; SHOW DATABASES; # 显示所有数据库 mysql&amp;gt; USE DATABASE; # 选择某个数据库 mysql&amp;gt; SHOW TABLES; # 显示当前数据库的所有表 mysql&amp;gt; SHOW VARIABLES LIKE &#39;%char%&#39;; # 显示数据库所用字符集 mysql&amp;gt; SHOW FULL COLUMNS FROM database.table; # 显示某个表的字符集 mysql&amp;gt; DESC TABLENAME; # 查看某个表的结构 mysql&amp;gt; SHOW GRANTS; # 查看当前用户权限 mysql&amp;gt; SHOW GRANTS FOR &#39;username&#39;@&#39;host&#39;; # 查看某个用户的权限 mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;; # 创建用户 # host使用%为允许从任意地方登录，如果只允许用户本地登录，改成localhost即可 mysql&amp;gt; GRANT privileges ON databasename.</description>
    </item>
    
    <item>
      <title>使用Systemd管理应用</title>
      <link>http://dmdgeeker.com/post/systemd/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/systemd/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</guid>
      <description>关于systemd Systemd在新版Linux操作系统(Ubuntu 15.04+, RHEL 7+, Debian 8+)里基本都已成为内置软件
systemctl --version # 查看systemd版本号  Unit Systemd以Unit作为基本管理单元，一般存放于/usr/lib/systemd/system/或/lib/systemd/system和/etc/systemd/system/目录(后者优先级更高)。
其支持类型有：SERVICE.service, SOCKET.socket, DEVICE.device, MOUNT.mount, AUTOMOUNT.automount, SWAP.swap, TARGET.target, PATH.path, TIMER.timer, SLICE.slice, SCOPE.scope
systemctl list-unit-files # 查看所有已安装服务 systemctl list-units --type=service # 列出所有正在运行的、类型为 service 的 Unit  管理自定义的应用一般只需要用到SERVICE.service配置文件。
服务配置文件  此处使用了一个简单的shell脚本，位于/usr/local/bin/hello 其内容为：
#!/bin/sh
echo &amp;ldquo;This is hello program!&amp;rdquo;
 服务的配置文件一般格式如下：
[Unit] # 应用描述 Description=A test program # 应用文档地址 Documentation=https://docs.example.com # 必须在某一个或多个单元之后启动 After=network.target ssh.service # 依赖于某一个或多个单元 Requires=ssh.service [Service] # 进程启动方式，有：simple(默认), forking, oneshot, notify, dbus, idle这几种方式 Type=simple # 启动服务之前执行的命令 ExecStartPre=/usr/bin/which hello # 启动程序 ExecStart=/user/local/bin/hello # 启动服务之后执行的命令 ExecStartPost=/bin/echo &amp;quot;start hello success.</description>
    </item>
    
    <item>
      <title>Gitlab安装</title>
      <link>http://dmdgeeker.com/post/gitlab-install/gitlab%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 08 Oct 2016 12:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/gitlab-install/gitlab%E5%AE%89%E8%A3%85/</guid>
      <description>安装环境配置 环境配置参见Github
 Ubuntu/Debian/CentOS/RHEL Ruby (MRI) 2.3 Git 2.7.4+ Redis 2.8+ MySQL or PostgreSQL  安装步骤  安装相关依赖
sudo apt-get install curl openssh-server ca-certificates  添加gitlab-ce到apt仓库中并安装
curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash sudo apt-get install gitlab-ce  配置并启动Gitlab，配置文件位于(/etc/gitlab/gitlab.rb)
sudo gitlab-ctl reconfigure   安装详解 在上面的安装步骤中，它自动化的安装了PostgreSQL, Nginx等软件。
配置相关 配置文件位于/etc/gitlab/gitlab.rb中，所有配置都在些进行修改，然后执行reconfigure命名即可生效。
 邮件SMTP配置
# gitlab_rails[&#39;smtp_enable&#39;] = true # gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.server&amp;quot; # gitlab_rails[&#39;smtp_port&#39;] = 465 # gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;smtp user&amp;quot; # gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;smtp password&amp;quot; # gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;example.</description>
    </item>
    
  </channel>
</rss>