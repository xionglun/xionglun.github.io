<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on 随笔小记</title>
    <link>http://blog.yeeef.com/tags/dev/</link>
    <description>Recent content in Dev on 随笔小记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Tue, 06 Feb 2018 10:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.yeeef.com/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Puppeteer 基本概念介绍</title>
      <link>http://blog.yeeef.com/post/puppeteer-introduction/</link>
      <pubDate>Tue, 06 Feb 2018 10:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/puppeteer-introduction/</guid>
      <description>关于Puppeteer 对于Puppeteer是个什么东西，有什么用途，这里不作详细介绍。网上相关介绍特别多，小白也可自行Google一下。 简单一句话来说，它就是类似于PhantomJS或者Nightmare的一个Node库。
开发配置 推荐使用Node.js 8+和ES 2015以上语法进行开发
下载安装：
# 中国用户需要设置下载源(选择下面任一方法即可) # export PUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors # 或者 set PUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors # 或者 npm config set puppeteer_download_host=https://npm.taobao.org/mirrors npm i puppeteer  详细了解请参考Taobao源下载
当然，也可以选择不下载Puppeteer默认使用的Chromium，而是使用自己电脑上的Chrome进行开发。
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm i puppeteer  开始使用 使用Puppeteer非常简单，与使用一个Node.js第三库一样。
const puppeteer = require(&#39;puppeteer&#39;) async function start() { const browser = await puppeteer.launch({ headless: false, args: [&#39;--disable-infobars&#39;, &#39;--no-sandbox&#39;, &#39;--disable-setuid-sandbox&#39;], }) const page = await browser.newPage() await page.goto(&#39;https://www.example.com&#39;) await page.screenshot({path: &#39;screenshot.png&#39;}) await browser.close() } start()  使用自己电脑上的Chrome进行测试开发(这里以macOS为例，Windows上需要配置相应路径):</description>
    </item>
    
    <item>
      <title>Go 并发与调试</title>
      <link>http://blog.yeeef.com/post/golang-concurrency/</link>
      <pubDate>Mon, 06 Nov 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/golang-concurrency/</guid>
      <description>本文是对Using the Go execution tracer to speed up fractal rendering这篇文章的翻译和整理。
作者源代码参见：Github
 前言 本文中使用Go语言的版本为：1.9.2
本文使用代码来生成一张如下所示的图片：
初始代码 代码通过算法渲染图片上每一像素生成一张 2048x2048 大小的图片，代码如下：
package main import ( &amp;quot;image&amp;quot; &amp;quot;image/color&amp;quot; &amp;quot;image/png&amp;quot; &amp;quot;os&amp;quot; ) const ( output = &amp;quot;output.png&amp;quot; width = 2048 height = 2048 ) func norm(x, total int, min, max float64) float64 { return (max-min)*float64(x)/float64(total) - max } func pixel(i, j, width, height int) color.Color { // Play with this constant to increase the complexity of the fractal.</description>
    </item>
    
    <item>
      <title>Goreman 基本用法</title>
      <link>http://blog.yeeef.com/post/goreman/</link>
      <pubDate>Sat, 28 Oct 2017 11:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/goreman/</guid>
      <description>Goreman Goreman 是一个Foreman的Go语言的克隆版本，一般在开发过程中的调试多个进程时使用。
当前开发趋势中，微服务架构以及分布式架构很流行，很多应用依赖于其它应用或者集群化。这样在本地调试时，会有很多不方便的地方。而使用Goreman同时批量管理多个进程，可以方便开发。
下载安装 可以通过go get来下载安装最二进制文件
go get github.com/mattn/goreman  也可以在releases页面下载相应平台的最新二进制执行文件zip包。 然后将解压出来的二进制文件放置于你的PATH路径下。
配置文件 与Foreman使用方法相同，都是基于Procfile配置文件来运行的。其中Procfile文件内容与你正常在shell中执行命令大致相同。如etcd的Procfile文件示例：
# Use goreman to run `go get github.com/mattn/goreman` etcd1: bin/etcd --name infra1 --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://127.0.0.1:2379 --listen-peer-urls http://127.0.0.1:12380 --initial-advertise-peer-urls http://127.0.0.1:12380 --initial-cluster-token etcd-cluster-1 --initial-cluster &#39;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380&#39; --initial-cluster-state new --enable-pprof etcd2: bin/etcd --name infra2 --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://127.0.0.1:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls http://127.0.0.1:22380 --initial-cluster-token etcd-cluster-1 --initial-cluster &#39;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380&#39; --initial-cluster-state new --enable-pprof etcd3: bin/etcd --name infra3 --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://127.0.0.1:32379 --listen-peer-urls http://127.</description>
    </item>
    
    <item>
      <title>CoreDNS 上手</title>
      <link>http://blog.yeeef.com/post/coredns-try/</link>
      <pubDate>Tue, 22 Aug 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/coredns-try/</guid>
      <description>关于 CoreDNS CoreDNS 是一个从 Caddy 中Fork出来的项目（同时继承了它的链式中间件风格），作为CNCF项目中的一员，它的目标是提供一个快速且灵活的DNS服务。
部署 CoreDNS 当前（2017/08/22）CoreDNS 还处于早期阶段，直接在Github上下载对应执行文件压缩包。
Linux上下载安装（这里以 v010 版本为例）：
wget https://github.com/coredns/coredns/releases/download/v010/coredns_010_linux_x86_64.tgz tar xzf coredns_010_linux_x86_64.tgz mv coredns /usr/local/bin  配置示例 参考 QuickStart 中的配置。
配置文件Corefile示例如下：
. { proxy . 223.5.5.5:53 { except example.org protocol dns } prometheus # enable metrics errors stdout # show errors log stdout # show query logs } example.org { file /etc/coredns/zones/example.org prometheus # enable metrics errors stdout # show errors log stdout # show query logs }  具体Corefile配置说明请参考文档</description>
    </item>
    
    <item>
      <title>K8S系列-Minikube使用简介</title>
      <link>http://blog.yeeef.com/post/minikube-usage/</link>
      <pubDate>Sun, 20 Aug 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/minikube-usage/</guid>
      <description>关于 Minikube Minikube 相当于一个运行在你开发电脑上的微型 Kubernetes， 它拥有大部份的标准 Kubernetes 特性，但是运行在你个人电脑上，而不是在一个几十几百台机器的集群中。
Minikube 安装流程 Minikube 在个人电脑上运行时，需要一个虚拟驱动层如 VirtualBox、xhyve、VMWARE、KVM、Hyper-V 等（只需要一种即可）。 本人在 macOS 上，选用的是 VirtualBox 虚拟机。
 安装 VirtualBox 虚拟机 安装 Minikube
brew cask install minikube # 或者直接下载安装 (Mac) # curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.22.2/minikube-darwin-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/  安装 Kubectl
brew install kubernetes-cli   配置与启动 Minikube 由于 Kubernetes 是 Google 公司员工开源维护的，所以其所依赖的一些镜像位于 Google 的公有仓库中。 由于一些众所周知的原因，在国内访问基本不可用，所以需要自备梯子（代理服务器）。
如果你没有梯子以及类似东西的话，基本无法进一步使用下去，可以弃坑了。
如果你使用了一个本地代理，其提供了HTTP代理服务，监听地址如：0.0.0.0:7087。你可以这样启动 Minikube :
 查看 VirtualBox 的网关IP地址</description>
    </item>
    
    <item>
      <title>火焰图性能分析</title>
      <link>http://blog.yeeef.com/post/flamegraph/</link>
      <pubDate>Sun, 09 Jul 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/flamegraph/</guid>
      <description>前言 应用程序性能一直是软件开发过程中一个很重要的话题，性能的好坏不仅会直接影响到所消耗的资源和投入的金钱， 而且会直接影响到用户的使用体验，从而间接影响一款产品的生命周期。
在软件开发过程中，一般会使用多种手段来量化性能、追踪性能问题等。比如使用ab及wrk等工具来压测网络应用，使用Zipkin或Opentracing等跟踪性能问题，使用日志来定位性能问题，使用gdb等工具调试性能问题。
而火焰图是一个可以让你直观了解性能问题的方式，最终一般会生成一张SVG格式的图片，你可以会方便地进行缩放以及进一步查看局部区域，如下所示。 关于火焰图 生成火焰图，需要经历采集、转化、渲染等多个步骤，不同步骤需要用到不同的工具。
首先，我们需要进行性能数据采集。只有收集到足够的数据后，才能进行相应的分析。 性能采集工具不同操作系统各有不同，在Linux操作系统中常用的有Perf和Systemtap这两种工具。
在采集到数据后，需要对数据进行处理，以获得相应格式化的数据。 使用FlameGraph可以对这两种工具采集来的数据进行处理，生成可以渲染的数据。 同时，FlameGraph也可以将处理完成的数据生成SVG图片，以供仔细分析。
Openresty应用作者在使用火焰图过程中，总结出了一套相应的性能采集工具集Openresty systemtap toolkit，来采集各种不同类型的性能数据。
采集性能数据的类型有几种，主要是下面几种：
 On CPU 当CPU占用率比较高时使用 Off CPU 当CPU占用率并不高，性能瓶颈位于IO或者锁等地方时使用 Memory 当可能出现内存泄露时使用 Hot/Cold 试验性质，联合CPU的两种类型，相当于On CPU + Off CPU  使用Perf采集数据 perf是Linux系统下的一个性能采集工具，只能用于Linux系统。更详细的perf使用方法，请参考 perf Examples。
 安装perf工具
 Ubuntu 16.04
sudo apt install -y linux-tools-`uname -r`  CentOS 7
sudo yum install perf    运行perf --help命令，如果出现类似下面的提示
WARNING: perf not found for kernel 4.4.0-81 You may need to install the following packages for this specific kernel: linux-tools-4.</description>
    </item>
    
    <item>
      <title>Uber Jaeger安装与使用</title>
      <link>http://blog.yeeef.com/post/uber_jaeger/</link>
      <pubDate>Fri, 30 Jun 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/uber_jaeger/</guid>
      <description>关于Jaeger Jaeger是Uber推出的一款调用链追踪系统，类似于Zipkin和Dapper，为微服务调用追踪而生。 其主要用于多个服务调用过程追踪分析，图形化服务调用轨迹，便于快速准确定位问题。
组件分析 Jaeger主要组件有：
 数据存储Cassandra 数据收集处理Collector 客户端代理Agent 数据查询Query 前端界面展示UI 客户端库jaeger-client-*  相互之间关系如下图所示: 数据存储 目前Jaeger收集到的数据都是持久化到Cassandra里面。
数据收集处理 数据收集处理即从客户端代理处获取到最新的数据，进行处理后存入到存储里面
客户端代理 一般来说，应用的trace数据并不是直接从应用发到收集处理的服务端（虽然也可以直接发过去）， 而是通过一个靠近客户端的代理，由代理转发到服务端。这样方便应用的快速处理，同时也可以减缓对服务端的直接压力。
客户端代理还有一个特性，就是可以进行控制应用追踪数据采样控制。这样就不必把所有的配置都固化写到应用配置文件里， 可以通过代理动态调整频率。
数据查询 前端界面进行展示时，通常需要根据不同条件到数据库里进行搜索。所以这里需要一个拼接搜索条件、读取数据库的程序。 因而Jaeger提供了这样一个组件来供前端来使用。
前端界面 这是一个React的前端应用，当前界面上功能相对还是比较简单的。
客户端库 目前，Jaeger提供了四种语言的官方客户端库，分别为Go, Node, Java, Python这四种语言。
安装部署 请注意，Jaeger依赖于Cassandra，所以请先安装Cassandra后再进行安装使用。
目前（2017/06/30），由于Jaeger还是处于Beta状态，所以需要自行下载编译。 看官方的动向，是想要容器化使用docker镜像的方式来安装，所以这里介绍一下手工安装过程。
编译二进制文件 到Jaeger的Github仓库下载源码到GOPATH下。 可以通过下面的命令进行下载：
go get github.com/uber/jaeger  然后需要安装依赖(请注意，这里可能需要梯子！):
glide install  完成以上两个步骤后，进行编译(这一步会同时编译多个二进制文件)：
make build-crossdock-bin # 编译Linux可执行程序 make build-ui # 编译UI界面  编译完成后主要的三个可执行文件(Linux程序)分别位于：
cmd/collector/collector-linux # Collector cmd/agent/agent-linux # Agent cmd/query/query-linux # Query  前端编译成静态文件位于jaeger-ui-build/build/目录下，前端界面可以直接使用Nginx处理，也可以参照说明使用serve应用进行处理。</description>
    </item>
    
    <item>
      <title>Go 语言之信号量</title>
      <link>http://blog.yeeef.com/post/golang-signal/</link>
      <pubDate>Sun, 28 May 2017 11:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/golang-signal/</guid>
      <description>Go 信号 Go 语言中的信号量主要是用于Unix/Linux系统，但是也部份兼容Windows。 在标准库中，主要涉及到os/signal和syscall这两个包。
其中，os/signal包主要是提供信号操作函数，而syscall里定义了许多信号常量。
简单示例 这里先看一段简短的代码：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; ) func main() { c := make(chan os.Signal, 1) signal.Notify(c, os.Interrupt) // Block until a signal is received. s := &amp;lt;-c fmt.Println(&amp;quot;Got signal:&amp;quot;, s) // Got signal: interrupt }  这里是Golang文档中的一个示例，程序会捕获os.Interrupt信号，也就是syscall.SIGINT信号。 当捕获到这个信号后，将其打印出来。运行这个示例时，按Ctrl+C中断程序运行，即可看到输出。
用法详解 在os/signal包中，主要有以下几个函数：
// 忽略某个或某几个信号 func Ignore(sig ...os.Signal) // 注册接收某个或某几个信号 func Notify(c chan&amp;lt;- os.Signal, sig ...os.Signal) // 重置一个或多个信号处理，如果参数为空，则重置所有信号处理 func Reset(sig ...os.Signal) // 停止接收信号 func Stop(c chan&amp;lt;- os.</description>
    </item>
    
    <item>
      <title>Spacemacs入门与基本用法</title>
      <link>http://blog.yeeef.com/post/spacemacs_usage/</link>
      <pubDate>Wed, 10 May 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/spacemacs_usage/</guid>
      <description>关于Spacemacs 总体来说，Spacemacs其实就是一个Emacs的壳，在原来Emacs上加入了许多插件及配置，所以对Spacemacs的配置也很像Emacs。但在文本编辑的时候，可以使用几乎完全VIM特性（个人暂时没发现有什么不兼容的地方）。
安装Spacemacs Spacemacs的Github地址为：https://github.com/syl20bnr/spacemacs
如果你的系统已装有Emacs，请先备份Emacs配置文件。因为Spacemacs的配置会覆盖掉原Emacs的配置文件。
cd ~ mv .emacs.d .emacs.d.bak mv .emacs .emacs.bak  如果你的系统没有安装Emacs，需要先安装Emacs，请注意Emacs版本至少为24.4
brew install emacs # macOS 平台，并使用 Homebrew emacs --version # 查看Emacs版本  或者按照Spacemacs教程进行安装Emacs。
安装Spacemacs
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d  启动Spacemacs
emacs # 安装完成后，直接使用emacs命令即可启动Spacemacs  初次启动Spacemacs会进行初始化配置（启动时会询问使用简、全哪套配置方案），安装依赖有可能需要一段时间。
在通过命令行启动Spacemacs后，可能会发现状态栏乱码了。这是因为字体不支持的原因，需要安装Source Code Pro字体。 同时，还可能需要安装Powerline字体补丁。
基本概念 在Spacemacs配置或者快捷键操作命令中，经常可以看到SPC这个词，它其实是一个Leader键，类似于tmux中的ctrl + b键。在Spacemacs中，其默认为space也就是空格键。
在Mac键盘上，各符号对应键位:
SPC 空格键 C Ctrl M Meta (alt/option)  PS: 本文是基于VIM模式（即evil）的，所以可能会与使用原Emacs模式的使用方式上有不同！
配置Spacemacs Spacemacs的主要配置位于~/.spacemacs文件中。可以单独使用编辑器对此文件进行编辑，也可以在Spacemacs中对其进行编辑。
在Spacemacs状态下进行编辑SPC f e d，刷新配置SPC f e R。
常用快捷键  书签</description>
    </item>
    
    <item>
      <title>一次慢请求优化</title>
      <link>http://blog.yeeef.com/post/optimize-slow-request/</link>
      <pubDate>Sat, 01 Apr 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/optimize-slow-request/</guid>
      <description>前言 最近的项目中，有一个用户数据导入的需求，导入的数据量大致应该是几百条左右。 但是由于每条用户数据都包含有其它子数据，并需要对这些数据进行单一处理，所以 预期处理时间比较长。
在完成接口之后，进行测试，大致在2秒左右可以完成300条左右数据导入，基本符合预期。
由于最近项目上了opentracing这个性能监控工具，所以想找一找倒底是哪里出现处理时间过长的问题。
性能预估 首先预估了一下可能会出现处理慢的两处地方：数据转换、数据存储。
猜测理由：
 数据转换
因为每一条用户数据可能需要10多次处理，每条处理规则可能不同，所以造成总数据处理时间会很长。
 数据存储
因为数据总量比较大，所以入库时候可能会比较慢。由于在应用层进行了数据拼接，所以入库时间应该不会特别慢。但是，可能会出现SQL过长的问题。
  压力测试 首先，对可能出现慢处理的地方做了压力测试。
用户数据转换:
BenchmarkEntry2User 20000	73788 ns/op  可以看到，这里的每一条用户数据转换大概需要的时间为: 73788ns = 73.788µs = 0.073ms，速度非常快。 这里的结果有点出乎意外，本以为会处理比较慢的地方，其实处理非常快。
在相应代码处添加上opentracing的监控代码后，得到请求图如下： 可以看到，请求图上效果与压力测试基本一致，用户转换花费时间并不长。而数据存储入库的时间明显不正常。
猜想优化 由于数据存储时间很长，所以很简单地认为是数据库出现了问题，对数据库进行一系列的优化。 然而，优化之后几乎没有任何效果。由于原数据是拼接而成的，于是猜想可能是SQL过长过大问题导致的。 将SQL改成事务后，依然没有任何积极的效果，反而进一步拉长了存储时间。 分析代码 由于对数据库进行优化没有收到任何效果，让我把目光再一次放到了代码上面。 经过仔细分析，发现了一条可能会比较耗时的操作：
user.Salt = utils.GenSalt() pass := utils.GenPassword() user.Password = utils.EncryptPassword(pass, user.Salt)  这里会对每一个导入的用户随机生成用户密码和盐，然后还有一次加密处理。
对EncryptPassword这个函数进行压测可得:
BenchmarkEncryptPassword 500	3514588 ns/op  由上可知，每一次加密动作耗时为: 3514588ns = 3514.588µs = 3.514588ms。 可知每一次加密需要耗时约3ms，而300个用户耗时可能接近1s。由于测试服务器性能相对于开发机更弱， 所以耗时轻松达到1s以上。至此，问题已然大白。
修正问题 在正确定位问题后，即可对症下药。 经过修改，事务型存储结果如下： 而通过拼接SQL存储结果如下： 其它 本次优化过程中使用到的相关东西：</description>
    </item>
    
    <item>
      <title>使用dot画流程图</title>
      <link>http://blog.yeeef.com/post/dot-graphviz/</link>
      <pubDate>Sat, 18 Feb 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/dot-graphviz/</guid>
      <description>关于dot dot是一门用文字表达图形的语言，而graphviz是一个将dot语言文本转化为图片(png, svg &amp;hellip;)的工具。
这里先看一个dot语言示例：
digraph example { a [label=&amp;quot;Hi, One&amp;quot; shape=box] b [label=&amp;quot;This two&amp;quot; shape=diamond] c [label=&amp;quot;And three&amp;quot; shape=oval] d [label=&amp;quot;Now, four&amp;quot; shape=triangle] a -&amp;gt; b [label=&amp;quot;a-&amp;gt;b&amp;quot; color=&amp;quot;red&amp;quot;]; b -&amp;gt; c [label=&amp;quot;b&amp;lt;-&amp;gt;c&amp;quot; color=&amp;quot;green&amp;quot; penwidth=2.5]; c -&amp;gt; d [label=&amp;quot;c-d&amp;quot;]; d -&amp;gt; a; }  其使用graphviz转化(dot -Tpng example.dot -o example.png)后结果如下图所示:
dot语法 使用dot画图时，就像使用一门编程语言一样。
首先，声明需要画的图形
digraph example { }  这里声明，需要画一个digraph类型的图，其名称为example。
基本画图类型有：digraph有向图，graph无向图，以及subgraph子图。
图基本上都由节点和连接线组成，所以一般只需要这两者即可。 其中有向图的结点之间使用-&amp;gt;连接线，而无向图结点之间使用--连接线，连接线两端为节点。 节点可以预先定义一些属性，如上面例子所示，也可以不定义属性，直接使用。
节点 节点有许多自身的属性，如形状、颜色、值、边框等。本文简单介绍几个基本属性，其它属性可以上官网查询使用。
结点常用属性：
   属性名 值类型 默认值 说明     label string \N 节点标题   shape shape ellipse 形状   color color black 节点边框颜色   style style  节点边框样式   sides int 4 当形状(shape)为多边形时的边数   height double 0.</description>
    </item>
    
    <item>
      <title>gRPC基本使用</title>
      <link>http://blog.yeeef.com/post/grpc-usage/</link>
      <pubDate>Thu, 16 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/grpc-usage/</guid>
      <description>通过RPC，客户端的应用程序可以方便地调用另外一台机器上的服务端程序，就像调用本地函数一样。
安装gRPC 标准安装可参考gRPC Install
这里摘录不同语言安装gRPC时的操作
C++ 从源代码编译 C# NuGet包Grpc Go go get google.golang.org/grpc Node npm install grpc PHP pecl install grpc Python pip install grpcio Ruby gem install grpc Java 参考 github.com/grpc/grpc-java Objective-C 参考 github.com/grpc/grpc/tree/master/src/objective-c  默认gRPC使用的是Protocol buffers，所以默认还需要安装protobuf。
如果是Mac操作系统，可以这样同时安装gRPC系列
brew tap grpc/grpc brew install --with-plugins grpc  这样安装的gRPC会同时安装protoc，grpc_cpp_plugin, grpc_node_plugin, grpc_php_plugin, grpc_python_plugin, grpc_csharp_plugin, grpc_objective_c_plugin, grpc_ruby_plugin这些可执行文件。
编写protobuf文件 由于gRPC默认使用protobuf作为传输格式，所以这里需要先编写相应proto文件。示例如下：
syntax = &amp;quot;proto3&amp;quot;; option java_multiple_files = true; option java_package = &amp;quot;io.grpc.examples.hello&amp;quot;; option java_outer_classname = &amp;quot;HelloProto&amp;quot;; option objc_class_prefix = &amp;quot;HL&amp;quot;; package hello; // The greeting service definition.</description>
    </item>
    
    <item>
      <title>Linux定时器</title>
      <link>http://blog.yeeef.com/post/linux-cron/</link>
      <pubDate>Wed, 15 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/linux-cron/</guid>
      <description>在linux中，定时器一般是使用cron这个系统工具来实现的。 但是，在systemd中也可以使用Timer进行定时控制。
 Cron 在linux下，可以使用crontab -e来编辑修改定时任务(重点在最后一行)
# Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).</description>
    </item>
    
    <item>
      <title>使用rsyslog集中管理日志</title>
      <link>http://blog.yeeef.com/post/rsyslog-collect-logs/</link>
      <pubDate>Fri, 10 Feb 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/rsyslog-collect-logs/</guid>
      <description>关于syslog Syslog是linux上传统的日志管理工具，而rsyslog是其改进版。很多系统都已将syslog替换为rsyslog进行日志管理了。
Syslog相关知识  Facility设施     代码 名称 描述     0 kern 内核   1 user 用户级   2 mail 邮件   3 daemon 系统   4 auth 安全与授权   5 syslog 守护进程   6 lpr 打印相关   7 news 网络消息   8 uucp uucp子系统   9  时钟   10 authpriv 安全与授权   11 ftp FTP   12 - NTP   13 - 日志审计   14 - 日志报警   15 cron 定时器   16 local0 用户自定义   17 local1 用户自定义   18 local2 用户自定义   19 local3 用户自定义   20 local4 用户自定义   21 local5 用户自定义   22 local6 用户自定义   23 local7 用户自定义     Level级别(重要性从高到低)     代码 级别 名称 描述     0 Emergency emerg 紧急   1 Alert alert 报警   2 Critical crit 关键   3 Error err 错误   4 Warning warn 警告   5 Notice notice 通知   6 Informational info 消息   7 Debug debug 调试    使用rsyslog记录日志 当前很多应用都已支持syslog进行日志记录</description>
    </item>
    
    <item>
      <title>tcpdump 基本使用方法</title>
      <link>http://blog.yeeef.com/post/tcpdump-basic-usage/</link>
      <pubDate>Fri, 10 Feb 2017 10:00:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/tcpdump-basic-usage/</guid>
      <description>基本使用  将捕获到的流量写入到某个文件
# -s 0 表示将完整数据包抓取下来，默认只抓取68字节 # -c 1000 表示抓1000个包, 避免抓取过多的包 # -w 表示写入 tcpdump -s 0 -c 1000 -w filename # 将监听到的输出写入到filename这个文件中  根据网卡来过滤流量
tcpdump -i eth1 # 监听eth1网卡的流量 tcpdump -i docker0 # 监听docker0网卡的流量  根据端口号来过滤
tcpdump tcp port 8080 # 监听本机8080端口TCP通讯 tcpdump udp port 567 # 查看本机某UDP端口567流量 tcpdump src port 25 # 来源端口为25的流量 tcpdump dst port 25 # 目的端口为25的流量 tcpdump -i eth1 src port 25 # 通过网卡eth1且来源端口为25的流量 tcpdump -i eth1 dst port 25 # 通过网卡eth1且目的端口为25的流量  根据源与目的地址过滤</description>
    </item>
    
    <item>
      <title>MySQL 基本操作</title>
      <link>http://blog.yeeef.com/post/mysql-usage/</link>
      <pubDate>Sun, 01 Jan 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/mysql-usage/</guid>
      <description>安装使用 安装 Ubuntu 16.04
sudo apt-get install mysql-server sudo mysql_secure_installation # 生产环境必备，安装一些安全策略  访问mysql mysql -u root -p  其它参数：
 -u username 登陆数据库所使用的数据库用户 -p password 使用密码登陆，如果没指定，则会在下面提示输入 -D database 此次登陆默认使用的数据库  基本操作 mysql&amp;gt; SHOW DATABASES; # 显示所有数据库 mysql&amp;gt; USE DATABASE; # 选择某个数据库 mysql&amp;gt; SHOW TABLES; # 显示当前数据库的所有表 mysql&amp;gt; SHOW VARIABLES LIKE &#39;%char%&#39;; # 显示数据库所用字符集 mysql&amp;gt; SHOW FULL COLUMNS FROM database.table; # 显示某个表的字符集 mysql&amp;gt; DESC TABLENAME; # 查看某个表的结构 mysql&amp;gt; SHOW GRANTS; # 查看当前用户权限 mysql&amp;gt; SHOW GRANTS FOR &#39;username&#39;@&#39;host&#39;; # 查看某个用户的权限 mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;; # 创建用户 # host使用%为允许从任意地方登录，如果只允许用户本地登录，改成localhost即可 mysql&amp;gt; GRANT privileges ON databasename.</description>
    </item>
    
    <item>
      <title>使用Systemd管理应用</title>
      <link>http://blog.yeeef.com/post/systemd-usage/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/systemd-usage/</guid>
      <description>关于systemd Systemd在新版Linux操作系统(Ubuntu 15.04+, RHEL 7+, Debian 8+)里基本都已成为内置软件
systemctl --version # 查看systemd版本号  Unit Systemd以Unit作为基本管理单元，用户级的 SERVICE.service 文件一般可存放于/etc/systemd/system/目录。
其支持类型有：SERVICE.service, SOCKET.socket, DEVICE.device, MOUNT.mount, AUTOMOUNT.automount, SWAP.swap, TARGET.target, PATH.path, TIMER.timer, SLICE.slice, SCOPE.scope
systemctl list-unit-files # 查看所有已安装服务 systemctl list-units --type=service # 列出所有正在运行的、类型为 service 的 Unit  管理自定义的应用一般只需要用到SERVICE.service配置文件。
服务配置文件  此处使用了一个简单的shell脚本，位于/usr/local/bin/hello 其内容为：
#!/bin/sh
echo &amp;ldquo;This is hello program!&amp;rdquo;
 服务的配置文件一般格式如下：
[Unit] # 应用描述 Description=A test program # 应用文档地址 Documentation=https://docs.example.com # 必须在某一个或多个单元之后启动 After=network.target ssh.service # 依赖于某一个或多个单元 Requires=ssh.service [Service] # 进程启动方式，有：simple(默认), forking, oneshot, notify, dbus, idle这几种方式 Type=simple # 启动服务之前执行的命令 ExecStartPre=/usr/bin/which hello # 启动程序 ExecStart=/user/local/bin/hello # 启动服务之后执行的命令 ExecStartPost=/bin/echo &amp;quot;start hello success.</description>
    </item>
    
    <item>
      <title>部署EBK进行日志收集与性能监控</title>
      <link>http://blog.yeeef.com/post/ebk-usage/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/ebk-usage/</guid>
      <description>关于EBK EBK 指的是elastic公司开发的一系列软件的简称，其分别代表：Elasticsearch, Beats与Kibana这三种软件。
其中:
 Elasticsearch 主要是用来存储数据，并根据索引进行检索数据。 Beats 其实是几个软件的组合(Filebeat, Metricbeat, Packetbeat, Winlogbeat)，是用于收集数据并输出到某一个地方。 Kibana 是用来展示数据的一个UI界面。  如何使用 关于EBK如何使用可以参考下图：
部署 环境：Ubuntu 16.04 64bit
 Elasticsearch(5.2)
Elasticsearch安装需要先安装Java
# 1. install java sudo add-apt-repository -y ppa:webupd8team/java sudo apt-get update sudo apt-get -y install oracle-java8-installer # 2. install elasticsearch wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - echo &amp;quot;deb https://artifacts.elastic.co/packages/5.x/apt stable main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install elasticsearch  Kibana</description>
    </item>
    
    <item>
      <title>Gitlab安装</title>
      <link>http://blog.yeeef.com/post/install-gitlab/</link>
      <pubDate>Sat, 08 Oct 2016 12:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/install-gitlab/</guid>
      <description>安装环境配置 环境配置参见Github
 Ubuntu/Debian/CentOS/RHEL Ruby (MRI) 2.3 Git 2.7.4+ Redis 2.8+ MySQL or PostgreSQL  安装步骤  安装相关依赖
sudo apt-get install curl openssh-server ca-certificates  添加gitlab-ce到apt仓库中并安装
curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash sudo apt-get install gitlab-ce  配置并启动Gitlab，配置文件位于(/etc/gitlab/gitlab.rb)
sudo gitlab-ctl reconfigure   安装详解 在上面的安装步骤中，它自动化的安装了PostgreSQL, Nginx等软件。
配置相关 配置文件位于/etc/gitlab/gitlab.rb中，所有配置都在些进行修改，然后执行reconfigure命名即可生效。
 邮件SMTP配置
# gitlab_rails[&#39;smtp_enable&#39;] = true # gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.server&amp;quot; # gitlab_rails[&#39;smtp_port&#39;] = 465 # gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;smtp user&amp;quot; # gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;smtp password&amp;quot; # gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;example.</description>
    </item>
    
  </channel>
</rss>