<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on Allen&#39;s Blog</title>
    <link>http://dmdgeeker.com/tags/dev/index.xml</link>
    <description>Recent content in Dev on Allen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <atom:link href="http://dmdgeeker.com/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL 基本操作</title>
      <link>http://dmdgeeker.com/2017/01/01/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 01 Jan 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2017/01/01/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>

&lt;h3 id=&#34;安装使用&#34;&gt;安装使用&lt;/h3&gt;

&lt;h5 id=&#34;安装&#34;&gt;安装&lt;/h5&gt;

&lt;p&gt;Ubuntu 16.04&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install mysql-server
sudo mysql_secure_installation     # 生产环境必备，安装一些安全策略
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;访问mysql&#34;&gt;访问mysql&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其它参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  -u  username 登陆数据库所使用的数据库用户
  -p  password 使用密码登陆，如果没指定，则会在下面提示输入
  -D  database 此次登陆默认使用的数据库
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql&amp;gt; SHOW DATABASES;                          # 显示所有数据库
mysql&amp;gt; USE DATABASE;                            # 选择某个数据库
mysql&amp;gt; SHOW TABLES;                             # 显示当前数据库的所有表
mysql&amp;gt; SHOW VARIABLES LIKE &#39;%char%&#39;;            # 显示数据库所用字符集
mysql&amp;gt; SHOW FULL COLUMNS FROM database.table;   # 显示某个表的字符集
mysql&amp;gt; DESC TABLENAME;                          # 查看某个表的结构
mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;  # 创建用户
# host使用%为允许从任意地方登录，如果只允许用户本地登录，改成localhost即可
mysql&amp;gt; DROP USER &#39;username&#39;@&#39;host&#39;;             # 删除用户

mysql&amp;gt; GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;;  # 授权给某个用户
# privileges 权限，可选值为：SELECT, UPDATE, INSERT, DELETE, DROP, CREATE, ALL 等。
# databasename 数据库名，对所有数据库给予权限用 * 来表示。
# tablename 表名，对所有的表给予权限用 * 来表示。
# 示例：GRANT ALL ON test.* TO &#39;username&#39;@&#39;%&#39;;
# 用此种方式被授权的用户不能给其他用户授权，如需要被授权用户可以进行授权，则需
# GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; WITH GRANT OPTION;
mysql&amp;gt; FLUSH PRIVILEGES;            # 应用更改的权限
mysql&amp;gt; REVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;  # 撤消用户权限

# 修改数据库或者表字符集为utf8mb4
mysql&amp;gt; ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
mysql&amp;gt; ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

$ mysql -u USERNAME -p PASSWORD -D DATABASE &amp;lt; sql_file        # 执行某个sql文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配置相关&#34;&gt;配置相关&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将字符编码设置为UTF-8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf      # 老版本配置文件: /etc/mysql/my.cnf
# [client]
# default-character-set=utf8mb4
#
# [mysqld]
# character-set-server=utf8mb4
# collation-server=utf8mb4_unicode_ci
# init_connect=&#39;SET NAMES utf8mb4&#39;
# skip-character-set-client-handshake = true
#
# [mysql]
# default-character-set = utf8mb4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;让MySQL可以被远程访问&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf      # 老版本配置文件: /etc/mysql/my.cnf
# 注释掉:  #bind-address  =  127.0.0.1
# 再重启MySQL服务
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重置MySQL root 密码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 重置密码:
mysqladmin -u root password NEWPASS
# 更改密码:
mysqladmin -u root -p PASSWORD
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看MySQL当前连接数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 查看当前连接数：
mysql&amp;gt; show status like &#39;Conn%&#39;;
# 查看当前客户端连接：
mysql&amp;gt; show processlist;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;问题与解决办法&#34;&gt;问题与解决办法&lt;/h3&gt;

&lt;h4 id=&#34;1-mysql-在导入大量数据时缓慢的问题&#34;&gt;1) MySQL 在导入大量数据时缓慢的问题&lt;/h4&gt;

&lt;p&gt;MySQL导出的SQL语句在导入时有可能会非常非常慢，经历过导入仅45万条记录，竟用了近3个小时。在导出时合理使用几个参数，可以大大加快导 入的速度。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;使用包括几个VALUES列表的多行INSERT语法;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;ndash;max_allowed_packet=XXX&lt;/td&gt;
&lt;td&gt;客户端/服务器之间通信的缓存区的最大大小;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;ndash;net_buffer_length=XXX&lt;/td&gt;
&lt;td&gt;TCP/IP和套接字通信缓冲区大小,创建长度达net_buffer_length的行。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注意：max_allowed_packet和net_buffer_length不能比目标数据库的设定数值大，否则可能出错。&lt;/p&gt;

&lt;p&gt;首先确定目标库的参数值&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql&amp;gt; show variables like &#39;max_allowed_packet&#39;;
mysql&amp;gt; show variables like &#39;net_buffer_length&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据参数值书写mysqldump命令从源数据库导出数据，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysqldump -u root -p -e --max_allowed_packet=1048576 --net_buffer_length=16384 db1 &amp;gt; backup.sql
# 使用-B(--databases)选项备份多个数据库
mysqldump -uroot -p -B db1 db2 db3 &amp;gt; db.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以直接进行导入:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql -u root -p &amp;lt; ./backup.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-mysql-中文匹配&#34;&gt;2) MySQL 中文匹配&lt;/h4&gt;

&lt;p&gt;使用LIKE时，中文匹配的问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mysql.taobao.org/monthly/2015/10/01/&#34;&gt;MySQL InnoDB 全文索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itdadao.com/articles/c15a643840p0.html&#34;&gt;MySQL 5.7 InnoDB全文索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用Systemd管理应用</title>
      <link>http://dmdgeeker.com/2016/11/08/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/11/08/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</guid>
      <description>

&lt;h3 id=&#34;关于systemd&#34;&gt;关于systemd&lt;/h3&gt;

&lt;p&gt;Systemd在新版Linux操作系统(Ubuntu 15.04+, RHEL 7+, Debian 8+)里基本都已成为内置软件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --version   # 查看systemd版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unit&#34;&gt;Unit&lt;/h3&gt;

&lt;p&gt;Systemd以&lt;code&gt;Unit&lt;/code&gt;作为基本管理单元，一般存放于&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;或&lt;code&gt;/lib/systemd/system&lt;/code&gt;和&lt;code&gt;/etc/systemd/system/&lt;/code&gt;目录(后者优先级更高)。&lt;/p&gt;

&lt;p&gt;其支持类型有：SERVICE.service, SOCKET.socket, DEVICE.device, MOUNT.mount, AUTOMOUNT.automount, SWAP.swap, TARGET.target, PATH.path, TIMER.timer, SLICE.slice, SCOPE.scope&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl list-unit-files            # 查看所有已安装服务
systemctl list-units --type=service  # 列出所有正在运行的、类型为 service 的 Unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理自定义的应用一般只需要用到&lt;strong&gt;SERVICE.service&lt;/strong&gt;配置文件。&lt;/p&gt;

&lt;h3 id=&#34;服务配置文件&#34;&gt;服务配置文件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;此处使用了一个简单的shell脚本，位于/usr/local/bin/hello
其内容为：&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;br /&gt;
  echo &amp;ldquo;This is hello program!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;服务的配置文件一般格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
# 应用描述
Description=A test program
# 应用文档地址
Documentation=https://docs.example.com
# 必须在某一个或多个单元之后启动
After=network.target ssh.service
# 依赖于某一个或多个单元
Requires=ssh.service

[Service]
# 进程启动方式，有：simple(默认), forking, oneshot, notify, dbus, idle这几种方式
Type=simple
# 启动服务之前执行的命令
ExecStartPre=/usr/bin/which hello
# 启动程序
ExecStart=/user/local/bin/hello
# 启动服务之后执行的命令
ExecStartPost=/bin/echo &amp;quot;start hello success.&amp;quot;
# 停止服务时执行的命令
ExecStop=/bin/echo &amp;quot;stop hello&amp;quot;
# 重启服务时执行的命令
ExecReload=/bin/kill -s HUP $MAINPID
# 进程结束后重启方式，可选值有：always, on-success, on-failure, on-abnormal, on-abort, on-watchdog
Restart=on-failure
# 重启间隔秒数
RestartSec=30
# 标准输出到
StandardOutput=syslog
# 标准错误输出到
StandardError=syslog
# 设置syslog中log的程序名称
SyslogIdentifier=helloexample
# 程序运行时的用户
User=root
# 程序运行时分配的组
Group=root
# 程序的环境变量
Environment=NODE_ENV=production

# 依赖于
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上面配置写入到&lt;code&gt;/etc/systemd/system/hello.service&lt;/code&gt;中，然后执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl daemon-reload
systemctl enable hello.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样即可加载服务到systemd中。&lt;/p&gt;

&lt;p&gt;检查服务是否已加入到systemd管理&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl status hello.service
#● hello.service - A test program
#   Loaded: loaded (/lib/systemd/system/hello.service; enabled; vendor preset: enabled)
#   Active: inactive (dead)
#     Docs: https://docs.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl start hello.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看hello服务输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;journalctl -u hello.service
# 1) 没有使用SyslogIdentifier时的输出
#Feb 07 14:19:40 i-rcaex55q systemd[1]: Starting A test program...
#Feb 07 14:19:40 i-rcaex55q which[27364]: /usr/local/bin/hello
#Feb 07 14:19:40 i-rcaex55q echo[27369]: start hello success.
#Feb 07 14:19:40 i-rcaex55q systemd[1]: Started A test program.
#Feb 07 14:19:40 i-rcaex55q hello[27368]: This is hello program!
#Feb 07 14:19:40 i-rcaex55q echo[27372]: stop hello
#Feb 07 14:22:30 i-rcaex55q systemd[1]: Stopped A test program.
# 2) 使用了SyslogIdentifier=helloexample时的输出
#Feb 07 14:22:39 i-rcaex55q systemd[1]: Starting A test program...
#Feb 07 14:22:39 i-rcaex55q helloexample[27419]: /usr/local/bin/hello
#Feb 07 14:22:39 i-rcaex55q helloexample[27423]: start hello success.
#Feb 07 14:22:39 i-rcaex55q helloexample[27422]: This is hello program!
#Feb 07 14:22:39 i-rcaex55q helloexample[27425]: stop hello
#Feb 07 14:22:39 i-rcaex55q systemd[1]: Started A test program.
#Feb 07 14:30:16 i-rcaex55q systemd[1]: Stopped A test program.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codeship.com/running-node-js-linux-systemd/&#34;&gt;Running node.js with systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-deploy-node-js-applications-using-systemd-and-nginx&#34;&gt;Node.js systemd &amp;amp; nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html&#34;&gt;Systemd 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Systemd&#34;&gt;Archlinux Systemd介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gitlab安装</title>
      <link>http://dmdgeeker.com/2016/10/08/gitlab%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 08 Oct 2016 12:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/10/08/gitlab%E5%AE%89%E8%A3%85/</guid>
      <description>

&lt;h3 id=&#34;安装环境配置&#34;&gt;安装环境配置&lt;/h3&gt;

&lt;p&gt;环境配置参见&lt;a href=&#34;https://github.com/gitlabhq/gitlabhq#software-stack&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu/Debian/CentOS/RHEL&lt;/li&gt;
&lt;li&gt;Ruby (MRI) 2.3&lt;/li&gt;
&lt;li&gt;Git 2.7.4+&lt;/li&gt;
&lt;li&gt;Redis 2.8+&lt;/li&gt;
&lt;li&gt;MySQL or PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装相关依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install curl openssh-server ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;添加&lt;code&gt;gitlab-ce&lt;/code&gt;到apt仓库中并安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
sudo apt-get install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置并启动Gitlab，配置文件位于(&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;安装详解&#34;&gt;安装详解&lt;/h4&gt;

&lt;p&gt;在上面的安装步骤中，它自动化的安装了&lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;Nginx&lt;/code&gt;等软件。&lt;/p&gt;

&lt;h3 id=&#34;配置相关&#34;&gt;配置相关&lt;/h3&gt;

&lt;p&gt;配置文件位于&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;中，所有配置都在些进行修改，然后执行&lt;code&gt;reconfigure&lt;/code&gt;命名即可生效。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;邮件SMTP配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# gitlab_rails[&#39;smtp_enable&#39;] = true
# gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.server&amp;quot;
# gitlab_rails[&#39;smtp_port&#39;] = 465
# gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;smtp user&amp;quot;
# gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;smtp password&amp;quot;
# gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;example.com&amp;quot;
# gitlab_rails[&#39;smtp_authentication&#39;] = &amp;quot;login&amp;quot;
# gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true
# gitlab_rails[&#39;smtp_tls&#39;] = false
# gitlab_rails[&#39;smtp_openssl_verify_mode&#39;] = &#39;none&#39; # Can be: &#39;none&#39;, &#39;peer&#39;, &#39;client_once&#39;, &#39;fail_if_no_peer_cert&#39;, see http://api.rubyonrails.org/classes/ActionMailer/Base.html
# gitlab_rails[&#39;smtp_ca_path&#39;] = &amp;quot;/etc/ssl/certs&amp;quot;
# gitlab_rails[&#39;smtp_ca_file&#39;] = &amp;quot;/etc/ssl/certs/ca-certificates.crt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上面的注释符号&lt;code&gt;#&lt;/code&gt;去掉，并填写相应的值即可。参见&lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md&#34;&gt;SMTP配置&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;认证LDAP配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gitlab_rails[&#39;ldap_enabled&#39;] = true
gitlab_rails[&#39;ldap_servers&#39;] = YAML.load &amp;lt;&amp;lt;-&#39;EOS&#39; # remember to close this block with &#39;EOS&#39; below
main: # &#39;main&#39; is the GitLab &#39;provider ID&#39; of this LDAP server
label: &#39;Authenticate&#39;
host: &#39;ldap.example.com&#39;
port: 389
uid: &#39;uid&#39;
method: &#39;plain&#39; # &amp;quot;tls&amp;quot; or &amp;quot;ssl&amp;quot; or &amp;quot;plain&amp;quot;
bind_dn: &#39;uid=root,dc=example,dc=com&#39;
password: &#39;123456789&#39;
active_directory: false
allow_username_or_email_login: false
block_auto_created_users: false
base: &#39;&#39;
user_filter: &#39;&#39;
attributes:
  username: [&#39;uid&#39;, &#39;username&#39;, &#39;sAMAccountName&#39;]
  email:    [&#39;mail&#39;, &#39;email&#39;, &#39;userPrincipalName&#39;]
  name:       &#39;displayName&#39;
  first_name: &#39;cn&#39;
  last_name:  &#39;sn&#39;
EOS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照上面的配置，进行相应的修改即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据库配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# gitlab_rails[&#39;db_adapter&#39;] = &amp;quot;postgresql&amp;quot;
# gitlab_rails[&#39;db_encoding&#39;] = &amp;quot;unicode&amp;quot;
# gitlab_rails[&#39;db_collation&#39;] = nil
# gitlab_rails[&#39;db_database&#39;] = &amp;quot;gitlabhq_production&amp;quot;
# gitlab_rails[&#39;db_pool&#39;] = 10
# gitlab_rails[&#39;db_username&#39;] = &amp;quot;gitlab&amp;quot;
# gitlab_rails[&#39;db_password&#39;] = nil
# gitlab_rails[&#39;db_host&#39;] = nil
# gitlab_rails[&#39;db_port&#39;] = 5432
# gitlab_rails[&#39;db_socket&#39;] = nil
# gitlab_rails[&#39;db_sslmode&#39;] = nil
# gitlab_rails[&#39;db_sslrootcert&#39;] = nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redis配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;## Redis TCP connection
# gitlab_rails[&#39;redis_host&#39;] = &amp;quot;127.0.0.1&amp;quot;
# gitlab_rails[&#39;redis_port&#39;] = 6379
# gitlab_rails[&#39;redis_password&#39;] = nil
# gitlab_rails[&#39;redis_database&#39;] = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多配置请查看&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;这个文件。&lt;/p&gt;

&lt;h2 id=&#34;使用docker进行gitlab安装&#34;&gt;使用docker进行Gitlab安装&lt;/h2&gt;

&lt;p&gt;待续&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/doc/settings&#34;&gt;Gitlab配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/&#34;&gt;Gitlab清华大学镜像站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/downloads/#ubuntu1604&#34;&gt;Gitlab下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ce/administration/auth/ldap.html&#34;&gt;Gitlab LDAP配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>