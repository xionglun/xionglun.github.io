<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn on 随笔小记</title>
    <link>http://blog.yeeef.com/tags/learn/</link>
    <description>Recent content in Learn on 随笔小记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Tue, 22 Aug 2017 22:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.yeeef.com/tags/learn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CoreDNS 上手</title>
      <link>http://blog.yeeef.com/post/coredns-try/</link>
      <pubDate>Tue, 22 Aug 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/coredns-try/</guid>
      <description>关于 CoreDNS CoreDNS 是一个从 Caddy 中Fork出来的项目（同时继承了它的链式中间件风格），作为CNCF项目中的一员，它的目标是提供一个快速且灵活的DNS服务。
部署 CoreDNS 当前（2017/08/22）CoreDNS 还处于早期阶段，直接在Github上下载对应执行文件压缩包。
Linux上下载安装（这里以 v010 版本为例）：
wget https://github.com/coredns/coredns/releases/download/v010/coredns_010_linux_x86_64.tgz tar xzf coredns_010_linux_x86_64.tgz mv coredns /usr/local/bin  配置示例 参考 QuickStart 中的配置。
配置文件Corefile示例如下：
. { proxy . 223.5.5.5:53 { except example.org protocol dns } prometheus # enable metrics errors stdout # show errors log stdout # show query logs } example.org { file /etc/coredns/zones/example.org prometheus # enable metrics errors stdout # show errors log stdout # show query logs }  具体Corefile配置说明请参考文档</description>
    </item>
    
    <item>
      <title>Spacemacs入门与基本用法</title>
      <link>http://blog.yeeef.com/post/spacemacs_usage/</link>
      <pubDate>Wed, 10 May 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/spacemacs_usage/</guid>
      <description>关于Spacemacs 总体来说，Spacemacs其实就是一个Emacs的壳，在原来Emacs上加入了许多插件及配置，所以对Spacemacs的配置也很像Emacs。但在文本编辑的时候，可以使用几乎完全VIM特性（个人暂时没发现有什么不兼容的地方）。
安装Spacemacs Spacemacs的Github地址为：https://github.com/syl20bnr/spacemacs
如果你的系统已装有Emacs，请先备份Emacs配置文件。因为Spacemacs的配置会覆盖掉原Emacs的配置文件。
cd ~ mv .emacs.d .emacs.d.bak mv .emacs .emacs.bak  如果你的系统没有安装Emacs，需要先安装Emacs，请注意Emacs版本至少为24.4
brew install emacs # macOS 平台，并使用 Homebrew emacs --version # 查看Emacs版本  或者按照Spacemacs教程进行安装Emacs。
安装Spacemacs
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d  启动Spacemacs
emacs # 安装完成后，直接使用emacs命令即可启动Spacemacs  初次启动Spacemacs会进行初始化配置（启动时会询问使用简、全哪套配置方案），安装依赖有可能需要一段时间。
在通过命令行启动Spacemacs后，可能会发现状态栏乱码了。这是因为字体不支持的原因，需要安装Source Code Pro字体。 同时，还可能需要安装Powerline字体补丁。
基本概念 在Spacemacs配置或者快捷键操作命令中，经常可以看到SPC这个词，它其实是一个Leader键，类似于tmux中的ctrl + b键。在Spacemacs中，其默认为space也就是空格键。
在Mac键盘上，各符号对应键位:
SPC 空格键 C Ctrl M Meta (alt/option)  PS: 本文是基于VIM模式（即evil）的，所以可能会与使用原Emacs模式的使用方式上有不同！
配置Spacemacs Spacemacs的主要配置位于~/.spacemacs文件中。可以单独使用编辑器对此文件进行编辑，也可以在Spacemacs中对其进行编辑。
在Spacemacs状态下进行编辑SPC f e d，刷新配置SPC f e R。
常用快捷键  书签</description>
    </item>
    
    <item>
      <title>使用dot画流程图</title>
      <link>http://blog.yeeef.com/post/dot-graphviz/</link>
      <pubDate>Sat, 18 Feb 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://blog.yeeef.com/post/dot-graphviz/</guid>
      <description>关于dot dot是一门用文字表达图形的语言，而graphviz是一个将dot语言文本转化为图片(png, svg &amp;hellip;)的工具。
这里先看一个dot语言示例：
digraph example { a [label=&amp;quot;Hi, One&amp;quot; shape=box] b [label=&amp;quot;This two&amp;quot; shape=diamond] c [label=&amp;quot;And three&amp;quot; shape=oval] d [label=&amp;quot;Now, four&amp;quot; shape=triangle] a -&amp;gt; b [label=&amp;quot;a-&amp;gt;b&amp;quot; color=&amp;quot;red&amp;quot;]; b -&amp;gt; c [label=&amp;quot;b&amp;lt;-&amp;gt;c&amp;quot; color=&amp;quot;green&amp;quot; penwidth=2.5]; c -&amp;gt; d [label=&amp;quot;c-d&amp;quot;]; d -&amp;gt; a; }  其使用graphviz转化(dot -Tpng example.dot -o example.png)后结果如下图所示:
dot语法 使用dot画图时，就像使用一门编程语言一样。
首先，声明需要画的图形
digraph example { }  这里声明，需要画一个digraph类型的图，其名称为example。
基本画图类型有：digraph有向图，graph无向图，以及subgraph子图。
图基本上都由节点和连接线组成，所以一般只需要这两者即可。 其中有向图的结点之间使用-&amp;gt;连接线，而无向图结点之间使用--连接线，连接线两端为节点。 节点可以预先定义一些属性，如上面例子所示，也可以不定义属性，直接使用。
节点 节点有许多自身的属性，如形状、颜色、值、边框等。本文简单介绍几个基本属性，其它属性可以上官网查询使用。
结点常用属性：
   属性名 值类型 默认值 说明     label string \N 节点标题   shape shape ellipse 形状   color color black 节点边框颜色   style style  节点边框样式   sides int 4 当形状(shape)为多边形时的边数   height double 0.</description>
    </item>
    
  </channel>
</rss>