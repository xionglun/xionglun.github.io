<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tool on 随笔小记</title>
    <link>http://yeeef.com/tags/tool/</link>
    <description>Recent content in Tool on 随笔小记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Fri, 14 Jul 2017 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://yeeef.com/tags/tool/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IPFS 上手试玩</title>
      <link>http://yeeef.com/post/ipfs-try/</link>
      <pubDate>Fri, 14 Jul 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://yeeef.com/post/ipfs-try/</guid>
      <description>关于IPFS IPFS 是一个很宏大的理念，而不简单地是一个应用或一个文件系统。 它希望建立一个点对点的分布式文件系统，使用内容Hash地址代替原Web网络中的域名，来获取得相应的资源。
IPFS 说明文档对IPFS的介绍如下：
 IPFS is a protocol IPFS is a filesystem IPFS is a web IPFS is modular IPFS uses crypto IPFS is p2p IPFS is a cdn IPFS has a name service  当前IPFS虽经历了几年的开发，但仍处于很早期的阶段（go-ipfs/0.4.10 ipfs/0.1.0），所以未来可能会有比较大变化（也可能失败&amp;hellip;）。
下载安装 IPFS 可以从官网下载，也可以从Github下载源代码进行编译安装。
如Linux进行安装IPFS的0.4.10版本，不同版本请自行修改下面的版本号
wget https://dist.ipfs.io/go-ipfs/v0.4.10/go-ipfs_v0.4.10_linux-amd64.tar.gz tar xzvf go-ipfs_v0.4.10_linux-amd64.tar.gz mv go-ipfs/ipfs /usr/local/bin/  基本使用 使用IPFS需要先进行初始化ipfs init，初始化目录一般为~/.ipfs目录，即当前用户HOME目录下的.ipfs目录。
 显示当前节点信息
ipfs id  如果守护进程启动后，会显示网络地址信息，否则只显示节点参数信息。
 添加文件(这里假设要添加文件readme.txt，其内容为readme)
ipfs add readme.txt #added Qmc7m4k5KUtEbyrTVjP6k8cRt7C99Rhe28hqFThGgGgEof readme.</description>
    </item>
    
    <item>
      <title>火焰图性能分析</title>
      <link>http://yeeef.com/post/flamegraph/</link>
      <pubDate>Sun, 09 Jul 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://yeeef.com/post/flamegraph/</guid>
      <description>前言 应用程序性能一直是软件开发过程中一个很重要的话题，性能的好坏不仅会直接影响到所消耗的资源和投入的金钱， 而且会直接影响到用户的使用体验，从而间接影响一款产品的生命周期。
在软件开发过程中，一般会使用多种手段来量化性能、追踪性能问题等。比如使用ab及wrk等工具来压测网络应用，使用Zipkin或Opentracing等跟踪性能问题，使用日志来定位性能问题，使用gdb等工具调试性能问题。
而火焰图是一个可以让你直观了解性能问题的方式，最终一般会生成一张SVG格式的图片，你可以会方便地进行缩放以及进一步查看局部区域，如下所示。 关于火焰图 生成火焰图，需要经历采集、转化、渲染等多个步骤，不同步骤需要用到不同的工具。
首先，我们需要进行性能数据采集。只有收集到足够的数据后，才能进行相应的分析。 性能采集工具不同操作系统各有不同，在Linux操作系统中常用的有Perf和Systemtap这两种工具。
在采集到数据后，需要对数据进行处理，以获得相应格式化的数据。 使用FlameGraph可以对这两种工具采集来的数据进行处理，生成可以渲染的数据。 同时，FlameGraph也可以将处理完成的数据生成SVG图片，以供仔细分析。
Openresty应用作者在使用火焰图过程中，总结出了一套相应的性能采集工具集Openresty systemtap toolkit，来采集各种不同类型的性能数据。
采集性能数据的类型有几种，主要是下面几种：
 On CPU 当CPU占用率比较高时使用 Off CPU 当CPU占用率并不高，性能瓶颈位于IO或者锁等地方时使用 Memory 当可能出现内存泄露时使用 Hot/Cold 试验性质，联合CPU的两种类型，相当于On CPU + Off CPU  使用Perf采集数据 perf是Linux系统下的一个性能采集工具，只能用于Linux系统。更详细的perf使用方法，请参考 perf Examples。
 安装perf工具
 Ubuntu 16.04
sudo apt install -y linux-tools-`uname -r`  CentOS 7
sudo yum install perf    运行perf --help命令，如果出现类似下面的提示
WARNING: perf not found for kernel 4.4.0-81 You may need to install the following packages for this specific kernel: linux-tools-4.</description>
    </item>
    
    <item>
      <title>Markdown 语法</title>
      <link>http://yeeef.com/post/markdown-syntax/</link>
      <pubDate>Sat, 24 Sep 2016 14:36:06 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://yeeef.com/post/markdown-syntax/</guid>
      <description>Markdown 在用于写简单文本非常方便。在这里将给出一些示例来示范Markdown所支持的标记语法。 这里并没有介绍所有Markdown文档，如果你需要完整版来进行深入了解，请查看Markdown这个网站。
 强调 删除 代码 链接 图像 标题 段落 引用 列表 表格 代码高亮 水平分隔线  强调 Markdown 通过 * (星号) 和 _ (下划线) 来作为着重表示的标记。 如下所示：
单个星号
单个下划线
两个星号
两个下划线
示例代码:
*单个星号* _单个下划线_ **两个星号** __两个下划线__  你必须使用相同的标记来开关标记块。
某些情况下，强调可以只是放置于词中间(如he*ll*o), 如Github等。但也有一些不会渲染出效果，如本博客所示。 但是如果在 * 和 _ 两边加上空格，那它会以普通文本形式进行渲染。 如果有需要, 你也可以在星号和下划线前加入反斜线进行转译。
\*这段文本在普通星号之间\*  删除 删除标记使用的是~~:
这是待删除的文本
示例代码:
~~这是待删除的文本~~  代码 使用`(反引号)来表示行内代码，与格式化代码块不同，行内代码表示其在一行中，如：
使用printf()函数。
示例代码:
使用 `printf()` 函数。  如果你想在代码中使用反引号，可以使用多个反引号作为开闭标记。 这是一个普通的(`)反引号.
示例代码：
``这是一个普通的(`)反引号.``  链接 Markdown支持内联和引用链接，这两种方式的链接名都放在方括号([])中。</description>
    </item>
    
  </channel>
</rss>