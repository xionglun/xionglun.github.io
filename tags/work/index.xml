<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Work on X blog</title>
    <link>http://dmdgeeker.com/tags/work/</link>
    <description>Recent content in Work on X blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Fri, 30 Jun 2017 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://dmdgeeker.com/tags/work/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Uber Jaeger安装与使用</title>
      <link>http://dmdgeeker.com/post/uber_jaeger/</link>
      <pubDate>Fri, 30 Jun 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/uber_jaeger/</guid>
      <description>关于Jaeger Jaeger是Uber推出的一款调用链追踪系统，类似于Zipkin和Dapper，为微服务调用追踪而生。 其主要用于多个服务调用过程追踪分析，图形化服务调用轨迹，便于快速准确定位问题。
组件分析 Jaeger主要组件有：
 数据存储Cassandra 数据收集处理Collector 客户端代理Agent 数据查询Query 前端界面展示UI 客户端库jaeger-client-*  相互之间关系如下图所示: 数据存储 目前Jaeger收集到的数据都是持久化到Cassandra里面。
数据收集处理 数据收集处理即从客户端代理处获取到最新的数据，进行处理后存入到存储里面
客户端代理 一般来说，应用的trace数据并不是直接从应用发到收集处理的服务端（虽然也可以直接发过去）， 而是通过一个靠近客户端的代理，由代理转发到服务端。这样方便应用的快速处理，同时也可以减缓对服务端的直接压力。
客户端代理还有一个特性，就是可以进行控制应用追踪数据采样控制。这样就不必把所有的配置都固化写到应用配置文件里， 可以通过代理动态调整频率。
数据查询 前端界面进行展示时，通常需要根据不同条件到数据库里进行搜索。所以这里需要一个拼接搜索条件、读取数据库的程序。 因而Jaeger提供了这样一个组件来供前端来使用。
前端界面 这是一个React的前端应用，当前界面上功能相对还是比较简单的。
客户端库 目前，Jaeger提供了四种语言的官方客户端库，分别为Go, Node, Java, Python这四种语言。
安装部署 请注意，Jaeger依赖于Cassandra，所以请先安装Cassandra后再进行安装使用。
目前（2017/06/30），由于Jaeger还是处于Beta状态，所以需要自行下载编译。 看官方的动向，是想要容器化使用docker镜像的方式来安装，所以这里介绍一下手工安装过程。
编译二进制文件 到Jaeger的Github仓库下载源码到GOPATH下。 可以通过下面的命令进行下载：
go get github.com/uber/jaeger  然后需要安装依赖(请注意，这里可能需要梯子！):
glide install  完成以上两个步骤后，进行编译(这一步会同时编译多个二进制文件)：
make build-crossdock-bin # 编译Linux可执行程序 make build-ui # 编译UI界面  编译完成后主要的三个可执行文件(Linux程序)分别位于：
cmd/collector/collector-linux # Collector cmd/agent/agent-linux # Agent cmd/query/query-linux # Query  前端编译成静态文件位于jaeger-ui-build/build/目录下，前端界面可以直接使用Nginx处理，也可以参照说明使用serve应用进行处理。</description>
    </item>
    
    <item>
      <title>gRPC基本使用</title>
      <link>http://dmdgeeker.com/post/grpc-usage/</link>
      <pubDate>Thu, 16 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/grpc-usage/</guid>
      <description>通过RPC，客户端的应用程序可以方便地调用另外一台机器上的服务端程序，就像调用本地函数一样。
安装gRPC 标准安装可参考gRPC Install
这里摘录不同语言安装gRPC时的操作
C++ 从源代码编译 C# NuGet包Grpc Go go get google.golang.org/grpc Node npm install grpc PHP pecl install grpc Python pip install grpcio Ruby gem install grpc Java 参考 github.com/grpc/grpc-java Objective-C 参考 github.com/grpc/grpc/tree/master/src/objective-c  默认gRPC使用的是Protocol buffers，所以默认还需要安装protobuf。
如果是Mac操作系统，可以这样同时安装gRPC系列
brew tap grpc/grpc brew install --with-plugins grpc  这样安装的gRPC会同时安装protoc，grpc_cpp_plugin, grpc_node_plugin, grpc_php_plugin, grpc_python_plugin, grpc_csharp_plugin, grpc_objective_c_plugin, grpc_ruby_plugin这些可执行文件。
编写protobuf文件 由于gRPC默认使用protobuf作为传输格式，所以这里需要先编写相应proto文件。示例如下：
syntax = &amp;quot;proto3&amp;quot;; option java_multiple_files = true; option java_package = &amp;quot;io.grpc.examples.hello&amp;quot;; option java_outer_classname = &amp;quot;HelloProto&amp;quot;; option objc_class_prefix = &amp;quot;HL&amp;quot;; package hello; // The greeting service definition.</description>
    </item>
    
    <item>
      <title>Linux定时器</title>
      <link>http://dmdgeeker.com/post/linux-cron/</link>
      <pubDate>Wed, 15 Feb 2017 19:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/linux-cron/</guid>
      <description>在linux中，定时器一般是使用cron这个系统工具来实现的。 但是，在systemd中也可以使用Timer进行定时控制。
 Cron 在linux下，可以使用crontab -e来编辑修改定时任务(重点在最后一行)
# Edit this file to introduce tasks to be run by cron. # # Each task to run has to be defined through a single line # indicating with different fields when the task will be run # and what command to run for the task # # To define the time you can provide concrete values for # minute (m), hour (h), day of month (dom), month (mon), # and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).</description>
    </item>
    
    <item>
      <title>使用rsyslog集中管理日志</title>
      <link>http://dmdgeeker.com/post/rsyslog-collect-logs/</link>
      <pubDate>Fri, 10 Feb 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/rsyslog-collect-logs/</guid>
      <description>关于syslog Syslog是linux上传统的日志管理工具，而rsyslog是其改进版。很多系统都已将syslog替换为rsyslog进行日志管理了。
Syslog相关知识  Facility设施     代码 名称 描述     0 kern 内核   1 user 用户级   2 mail 邮件   3 daemon 系统   4 auth 安全与授权   5 syslog 守护进程   6 lpr 打印相关   7 news 网络消息   8 uucp uucp子系统   9  时钟   10 authpriv 安全与授权   11 ftp FTP   12 - NTP   13 - 日志审计   14 - 日志报警   15 cron 定时器   16 local0 用户自定义   17 local1 用户自定义   18 local2 用户自定义   19 local3 用户自定义   20 local4 用户自定义   21 local5 用户自定义   22 local6 用户自定义   23 local7 用户自定义     Level级别(重要性从高到低)     代码 级别 名称 描述     0 Emergency emerg 紧急   1 Alert alert 报警   2 Critical crit 关键   3 Error err 错误   4 Warning warn 警告   5 Notice notice 通知   6 Informational info 消息   7 Debug debug 调试    使用rsyslog记录日志 当前很多应用都已支持syslog进行日志记录</description>
    </item>
    
    <item>
      <title>tcpdump 基本使用方法</title>
      <link>http://dmdgeeker.com/post/tcpdump-basic-usage/</link>
      <pubDate>Fri, 10 Feb 2017 10:00:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/tcpdump-basic-usage/</guid>
      <description>基本使用  将捕获到的流量写入到某个文件
# -s 0 表示将完整数据包抓取下来，默认只抓取68字节 # -c 1000 表示抓1000个包, 避免抓取过多的包 # -w 表示写入 tcpdump -s 0 -c 1000 -w filename # 将监听到的输出写入到filename这个文件中  根据网卡来过滤流量
tcpdump -i eth1 # 监听eth1网卡的流量 tcpdump -i docker0 # 监听docker0网卡的流量  根据端口号来过滤
tcpdump tcp port 8080 # 监听本机8080端口TCP通讯 tcpdump udp port 567 # 查看本机某UDP端口567流量 tcpdump src port 25 # 来源端口为25的流量 tcpdump dst port 25 # 目的端口为25的流量 tcpdump -i eth1 src port 25 # 通过网卡eth1且来源端口为25的流量 tcpdump -i eth1 dst port 25 # 通过网卡eth1且目的端口为25的流量  根据源与目的地址过滤</description>
    </item>
    
    <item>
      <title>MySQL 基本操作</title>
      <link>http://dmdgeeker.com/post/mysql-usage/</link>
      <pubDate>Sun, 01 Jan 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/mysql-usage/</guid>
      <description>安装使用 安装 Ubuntu 16.04
sudo apt-get install mysql-server sudo mysql_secure_installation # 生产环境必备，安装一些安全策略  访问mysql mysql -u root -p  其它参数：
 -u username 登陆数据库所使用的数据库用户 -p password 使用密码登陆，如果没指定，则会在下面提示输入 -D database 此次登陆默认使用的数据库  基本操作 mysql&amp;gt; SHOW DATABASES; # 显示所有数据库 mysql&amp;gt; USE DATABASE; # 选择某个数据库 mysql&amp;gt; SHOW TABLES; # 显示当前数据库的所有表 mysql&amp;gt; SHOW VARIABLES LIKE &#39;%char%&#39;; # 显示数据库所用字符集 mysql&amp;gt; SHOW FULL COLUMNS FROM database.table; # 显示某个表的字符集 mysql&amp;gt; DESC TABLENAME; # 查看某个表的结构 mysql&amp;gt; SHOW GRANTS; # 查看当前用户权限 mysql&amp;gt; SHOW GRANTS FOR &#39;username&#39;@&#39;host&#39;; # 查看某个用户的权限 mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;; # 创建用户 # host使用%为允许从任意地方登录，如果只允许用户本地登录，改成localhost即可 mysql&amp;gt; GRANT privileges ON databasename.</description>
    </item>
    
    <item>
      <title>使用Systemd管理应用</title>
      <link>http://dmdgeeker.com/post/systemd-usage/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/systemd-usage/</guid>
      <description>关于systemd Systemd在新版Linux操作系统(Ubuntu 15.04+, RHEL 7+, Debian 8+)里基本都已成为内置软件
systemctl --version # 查看systemd版本号  Unit Systemd以Unit作为基本管理单元，用户级的 SERVICE.service 文件一般可存放于/etc/systemd/system/目录。
其支持类型有：SERVICE.service, SOCKET.socket, DEVICE.device, MOUNT.mount, AUTOMOUNT.automount, SWAP.swap, TARGET.target, PATH.path, TIMER.timer, SLICE.slice, SCOPE.scope
systemctl list-unit-files # 查看所有已安装服务 systemctl list-units --type=service # 列出所有正在运行的、类型为 service 的 Unit  管理自定义的应用一般只需要用到SERVICE.service配置文件。
服务配置文件  此处使用了一个简单的shell脚本，位于/usr/local/bin/hello 其内容为：
#!/bin/sh
echo &amp;ldquo;This is hello program!&amp;rdquo;
 服务的配置文件一般格式如下：
[Unit] # 应用描述 Description=A test program # 应用文档地址 Documentation=https://docs.example.com # 必须在某一个或多个单元之后启动 After=network.target ssh.service # 依赖于某一个或多个单元 Requires=ssh.service [Service] # 进程启动方式，有：simple(默认), forking, oneshot, notify, dbus, idle这几种方式 Type=simple # 启动服务之前执行的命令 ExecStartPre=/usr/bin/which hello # 启动程序 ExecStart=/user/local/bin/hello # 启动服务之后执行的命令 ExecStartPost=/bin/echo &amp;quot;start hello success.</description>
    </item>
    
    <item>
      <title>部署EBK进行日志收集与性能监控</title>
      <link>http://dmdgeeker.com/post/ebk-usage/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/ebk-usage/</guid>
      <description>关于EBK EBK 指的是elastic公司开发的一系列软件的简称，其分别代表：Elasticsearch, Beats与Kibana这三种软件。
其中:
 Elasticsearch 主要是用来存储数据，并根据索引进行检索数据。 Beats 其实是几个软件的组合(Filebeat, Metricbeat, Packetbeat, Winlogbeat)，是用于收集数据并输出到某一个地方。 Kibana 是用来展示数据的一个UI界面。  如何使用 关于EBK如何使用可以参考下图：
部署 环境：Ubuntu 16.04 64bit
 Elasticsearch(5.2)
Elasticsearch安装需要先安装Java
# 1. install java sudo add-apt-repository -y ppa:webupd8team/java sudo apt-get update sudo apt-get -y install oracle-java8-installer # 2. install elasticsearch wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - echo &amp;quot;deb https://artifacts.elastic.co/packages/5.x/apt stable main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install elasticsearch  Kibana</description>
    </item>
    
    <item>
      <title>Gitlab安装</title>
      <link>http://dmdgeeker.com/post/install-gitlab/</link>
      <pubDate>Sat, 08 Oct 2016 12:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/install-gitlab/</guid>
      <description>安装环境配置 环境配置参见Github
 Ubuntu/Debian/CentOS/RHEL Ruby (MRI) 2.3 Git 2.7.4+ Redis 2.8+ MySQL or PostgreSQL  安装步骤  安装相关依赖
sudo apt-get install curl openssh-server ca-certificates  添加gitlab-ce到apt仓库中并安装
curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash sudo apt-get install gitlab-ce  配置并启动Gitlab，配置文件位于(/etc/gitlab/gitlab.rb)
sudo gitlab-ctl reconfigure   安装详解 在上面的安装步骤中，它自动化的安装了PostgreSQL, Nginx等软件。
配置相关 配置文件位于/etc/gitlab/gitlab.rb中，所有配置都在些进行修改，然后执行reconfigure命名即可生效。
 邮件SMTP配置
# gitlab_rails[&#39;smtp_enable&#39;] = true # gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.server&amp;quot; # gitlab_rails[&#39;smtp_port&#39;] = 465 # gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;smtp user&amp;quot; # gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;smtp password&amp;quot; # gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;example.</description>
    </item>
    
    <item>
      <title>两步验证(2-step verification)</title>
      <link>http://dmdgeeker.com/post/two-factor-verification/</link>
      <pubDate>Sun, 28 Aug 2016 14:36:06 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/two-factor-verification/</guid>
      <description>关于两步验证 两步验证是一种安全措施，用于保护某些资源不被泄露，即使在泄露了密码的情况下。 两步验证有多种方式，主要包括：短信、验证器、电话等方式。本文主要讲述验证器方式的两步验证。
工作原理 使用基于验证器方式的两步验证通常需要另外一部设备（通常是手机，也可能是其它硬件）。 用户在登录系统时，除了输入正常的密码外，还需要输入一个动态生成的密码。 此动态密码由另外一部可信设备提供，具有一个较短的时效性，保证不会重回攻击。
动态密码生成通常有两种算法：TOTP与HOTP。
TOTP(Time-Based One-Time Password)是指基于时间的一次性密码。
HOTP(HMAC-based One-time Password)是指基于计数的一次性密码。
安全令牌硬件（如某些银行的动态密保，游戏账号的密码令牌）通常是基于HOTP方式实现。 其表现为使用专有硬件，为某一特定产品或系统服务。
而当前大多数两步验证使用的是TOTP方式实现，比如Google Authenticator。
TOTP流程 基于TOTP的两步验证流程一般通过需要先绑定，然后随用随验证。
现假设有一系统S，用户A进行两步验证
绑定流程一般如下：
 用户A注册/登录系统S后，S后台生成一个OTP链接，在前端生成并显示该链接的二维码
 用户A用手机通过Google Authenticator之类的验证器G扫描二维码进行绑定 验证器G会生成动态密码C，用户A将动态密码C输入到系统S的绑定验证框内 如果系统S后台验证该动态密码C成功，则系统S与验证器G绑定成功。否则，绑定失败。  验证流程如下:
 用户A通过账号密码登录系统S 系统S验证账号和密码匹配后，跳转到两步验证页面 用户A将验证器G里的动态验证码C输入到两步验证页面的验证框中 系统S对验证码C进行验证，如果成功，如登录成功，否则失败  TOTP实现 可以按照上面所述流程，一步步来进行实现。 下面主要介绍几个关键部份。
OTP链接 OTP链接格式: otpauth://TYPE/LABEL?PARAMETERS。 具体可参考Google Authenticator URI
示例：otpauth://totp/Google:alice@google.com?secret=JBSWY3DPEHPK3PXP&amp;amp;issuer=Google
其中，前面一段otpauth://totp/Example:alice@google.com中各部份的意义如下：
 otpauth表示OTP认证协议 totp表示使用TOTP算法 Google表示生成此链接的公司或软件名称 alice@google.com表示该链接所对应的用户的用户名  而后面一段查询参数中各部份意义如下：
 secret是由服务端Base32编码生成的字符串。其内容不重要，只要保证随机性即可，应保证每个用户都拥有一个独立的secret。 issuer表示生成此链接的公司或软件名称，应与前一段中相应部份一致。  动态验证码生成 动态验证码的生成算法是公开的，可以到此处进行查处：RFC6238
下面给出Go语言版本示例:
// 6位数字动态验证码 var digits = 6 // secret 即为otpauth链接中的secret // timeValue 为当前unix时间除以验证码失效时间（通常为30s） func computeCode(secret string, timeValue int64) string { key, err := base32.</description>
    </item>
    
    <item>
      <title>Authority &amp; Merit</title>
      <link>http://dmdgeeker.com/post/authority-merit/</link>
      <pubDate>Wed, 24 Aug 2016 00:37:55 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/authority-merit/</guid>
      <description>@reference: Medium
An email to the team at Square.
 Subject: Authority &amp;amp; Merit
From: Jack Dorsey
X-Mailer: iPhone Mail (9B206)
Date: Wed, 5 Sep 2012 15:08:02 -0700
To: Square
 Squares,
I’ve noticed a funny thing in the company. There’s been a high occurrence of folks using names, mine for instance, to push through an idea. “Jack really wants this to happen, Jack thinks this is an amazing idea, Jack said, etc.</description>
    </item>
    
    <item>
      <title>Good Product Manager/Bad Product Manager</title>
      <link>http://dmdgeeker.com/post/product-manager/</link>
      <pubDate>Wed, 24 Aug 2016 00:34:11 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/product-manager/</guid>
      <description>@reference: a16z
Warning: This document was written 15 years ago and is probably not relevant for today’s product managers. I present it here merely as an example of a useful training document.
Good product managers know the market, the product, the product line and the competition extremely well and operate from a strong basis of knowledge and confidence. A good product manager is the CEO of the product. A good product manager takes full responsibility and measures themselves in terms of the success of the product.</description>
    </item>
    
  </channel>
</rss>