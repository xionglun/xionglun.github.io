<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on Allen&#39;s Blog</title>
    <link>http://dmdgeeker.com/topics/develop/index.xml</link>
    <description>Recent content in Develop on Allen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <atom:link href="http://dmdgeeker.com/topics/develop/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL 基本操作</title>
      <link>http://dmdgeeker.com/2017/01/01/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 01 Jan 2017 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2017/01/01/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>

&lt;h3 id=&#34;安装使用&#34;&gt;安装使用&lt;/h3&gt;

&lt;h5 id=&#34;安装&#34;&gt;安装&lt;/h5&gt;

&lt;p&gt;Ubuntu 16.04&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install mysql-server
sudo mysql_secure_installation     # 生产环境必备，安装一些安全策略
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;访问mysql&#34;&gt;访问mysql&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其它参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  -u  username 登陆数据库所使用的数据库用户
  -p  password 使用密码登陆，如果没指定，则会在下面提示输入
  -D  database 此次登陆默认使用的数据库
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql&amp;gt; SHOW DATABASES;                          # 显示所有数据库
mysql&amp;gt; USE DATABASE;                            # 选择某个数据库
mysql&amp;gt; SHOW TABLES;                             # 显示当前数据库的所有表
mysql&amp;gt; SHOW VARIABLES LIKE &#39;%char%&#39;;            # 显示数据库所用字符集
mysql&amp;gt; SHOW FULL COLUMNS FROM database.table;   # 显示某个表的字符集
mysql&amp;gt; DESC TABLENAME;                          # 查看某个表的结构
mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;  # 创建用户
# host使用%为允许从任意地方登录，如果只允许用户本地登录，改成localhost即可
mysql&amp;gt; DROP USER &#39;username&#39;@&#39;host&#39;;             # 删除用户

mysql&amp;gt; GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;;  # 授权给某个用户
# privileges 权限，可选值为：SELECT, UPDATE, INSERT, DELETE, DROP, CREATE, ALL 等。
# databasename 数据库名，对所有数据库给予权限用 * 来表示。
# tablename 表名，对所有的表给予权限用 * 来表示。
# 示例：GRANT ALL ON test.* TO &#39;username&#39;@&#39;%&#39;;
# 用此种方式被授权的用户不能给其他用户授权，如需要被授权用户可以进行授权，则需
# GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; WITH GRANT OPTION;
mysql&amp;gt; FLUSH PRIVILEGES;            # 应用更改的权限
mysql&amp;gt; REVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;  # 撤消用户权限

# 修改数据库或者表字符集为utf8mb4
mysql&amp;gt; ALTER DATABASE databasename CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
mysql&amp;gt; ALTER TABLE tablename CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

$ mysql -u USERNAME -p PASSWORD -D DATABASE &amp;lt; sql_file        # 执行某个sql文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配置相关&#34;&gt;配置相关&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将字符编码设置为UTF-8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf      # 老版本配置文件: /etc/mysql/my.cnf
# [client]
# default-character-set=utf8mb4
#
# [mysqld]
# character-set-server=utf8mb4
# collation-server=utf8mb4_unicode_ci
# init_connect=&#39;SET NAMES utf8mb4&#39;
# skip-character-set-client-handshake = true
#
# [mysql]
# default-character-set = utf8mb4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;让MySQL可以被远程访问&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf      # 老版本配置文件: /etc/mysql/my.cnf
# 注释掉:  #bind-address  =  127.0.0.1
# 再重启MySQL服务
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重置MySQL root 密码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 重置密码:
mysqladmin -u root password NEWPASS
# 更改密码:
mysqladmin -u root -p PASSWORD
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看MySQL当前连接数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 查看当前连接数：
mysql&amp;gt; show status like &#39;Conn%&#39;;
# 查看当前客户端连接：
mysql&amp;gt; show processlist;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;问题与解决办法&#34;&gt;问题与解决办法&lt;/h3&gt;

&lt;h4 id=&#34;1-mysql-在导入大量数据时缓慢的问题&#34;&gt;1) MySQL 在导入大量数据时缓慢的问题&lt;/h4&gt;

&lt;p&gt;MySQL导出的SQL语句在导入时有可能会非常非常慢，经历过导入仅45万条记录，竟用了近3个小时。在导出时合理使用几个参数，可以大大加快导 入的速度。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;使用包括几个VALUES列表的多行INSERT语法;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;ndash;max_allowed_packet=XXX&lt;/td&gt;
&lt;td&gt;客户端/服务器之间通信的缓存区的最大大小;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;ndash;net_buffer_length=XXX&lt;/td&gt;
&lt;td&gt;TCP/IP和套接字通信缓冲区大小,创建长度达net_buffer_length的行。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注意：max_allowed_packet和net_buffer_length不能比目标数据库的设定数值大，否则可能出错。&lt;/p&gt;

&lt;p&gt;首先确定目标库的参数值&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql&amp;gt; show variables like &#39;max_allowed_packet&#39;;
mysql&amp;gt; show variables like &#39;net_buffer_length&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据参数值书写mysqldump命令从源数据库导出数据，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysqldump -u root -p -e --max_allowed_packet=1048576 --net_buffer_length=16384 db1 &amp;gt; backup.sql
# 使用-B(--databases)选项备份多个数据库
mysqldump -uroot -p -B db1 db2 db3 &amp;gt; db.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以直接进行导入:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mysql -u root -p &amp;lt; ./backup.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-mysql-中文匹配&#34;&gt;2) MySQL 中文匹配&lt;/h4&gt;

&lt;p&gt;使用LIKE时，中文匹配的问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mysql.taobao.org/monthly/2015/10/01/&#34;&gt;MySQL InnoDB 全文索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itdadao.com/articles/c15a643840p0.html&#34;&gt;MySQL 5.7 InnoDB全文索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用Systemd管理应用</title>
      <link>http://dmdgeeker.com/2016/11/08/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 08 Nov 2016 17:06:40 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/11/08/%E4%BD%BF%E7%94%A8systemd%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8/</guid>
      <description>

&lt;h3 id=&#34;关于systemd&#34;&gt;关于systemd&lt;/h3&gt;

&lt;p&gt;Systemd在新版Linux操作系统(Ubuntu 15.04+, RHEL 7+, Debian 8+)里基本都已成为内置软件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --version   # 查看systemd版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unit&#34;&gt;Unit&lt;/h3&gt;

&lt;p&gt;Systemd以&lt;code&gt;Unit&lt;/code&gt;作为基本管理单元，一般存放于&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;或&lt;code&gt;/lib/systemd/system&lt;/code&gt;和&lt;code&gt;/etc/systemd/system/&lt;/code&gt;目录(后者优先级更高)。&lt;/p&gt;

&lt;p&gt;其支持类型有：SERVICE.service, SOCKET.socket, DEVICE.device, MOUNT.mount, AUTOMOUNT.automount, SWAP.swap, TARGET.target, PATH.path, TIMER.timer, SLICE.slice, SCOPE.scope&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl list-unit-files            # 查看所有已安装服务
systemctl list-units --type=service  # 列出所有正在运行的、类型为 service 的 Unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理自定义的应用一般只需要用到&lt;strong&gt;SERVICE.service&lt;/strong&gt;配置文件。&lt;/p&gt;

&lt;h3 id=&#34;服务配置文件&#34;&gt;服务配置文件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;此处使用了一个简单的shell脚本，位于/usr/local/bin/hello
其内容为：&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;br /&gt;
  echo &amp;ldquo;This is hello program!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;服务的配置文件一般格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
# 应用描述
Description=A test program
# 应用文档地址
Documentation=https://docs.example.com
# 必须在某一个或多个单元之后启动
After=network.target ssh.service
# 依赖于某一个或多个单元
Requires=ssh.service

[Service]
# 进程启动方式，有：simple(默认), forking, oneshot, notify, dbus, idle这几种方式
Type=simple
# 启动服务之前执行的命令
ExecStartPre=/usr/bin/which hello
# 启动程序
ExecStart=/user/local/bin/hello
# 启动服务之后执行的命令
ExecStartPost=/bin/echo &amp;quot;start hello success.&amp;quot;
# 停止服务时执行的命令
ExecStop=/bin/echo &amp;quot;stop hello&amp;quot;
# 重启服务时执行的命令
ExecReload=/bin/kill -s HUP $MAINPID
# 进程结束后重启方式，可选值有：always, on-success, on-failure, on-abnormal, on-abort, on-watchdog
Restart=on-failure
# 重启间隔秒数
RestartSec=30
# 标准输出到
StandardOutput=syslog
# 标准错误输出到
StandardError=syslog
# 设置syslog中log的程序名称
SyslogIdentifier=helloexample
# 程序运行时的用户
User=root
# 程序运行时分配的组
Group=root
# 程序的环境变量
Environment=NODE_ENV=production

# 依赖于
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上面配置写入到&lt;code&gt;/etc/systemd/system/hello.service&lt;/code&gt;中，然后执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl daemon-reload
systemctl enable hello.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样即可加载服务到systemd中。&lt;/p&gt;

&lt;p&gt;检查服务是否已加入到systemd管理&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl status hello.service
#● hello.service - A test program
#   Loaded: loaded (/lib/systemd/system/hello.service; enabled; vendor preset: enabled)
#   Active: inactive (dead)
#     Docs: https://docs.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl start hello.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看hello服务输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;journalctl -u hello.service
# 1) 没有使用SyslogIdentifier时的输出
#Feb 07 14:19:40 i-rcaex55q systemd[1]: Starting A test program...
#Feb 07 14:19:40 i-rcaex55q which[27364]: /usr/local/bin/hello
#Feb 07 14:19:40 i-rcaex55q echo[27369]: start hello success.
#Feb 07 14:19:40 i-rcaex55q systemd[1]: Started A test program.
#Feb 07 14:19:40 i-rcaex55q hello[27368]: This is hello program!
#Feb 07 14:19:40 i-rcaex55q echo[27372]: stop hello
#Feb 07 14:22:30 i-rcaex55q systemd[1]: Stopped A test program.
# 2) 使用了SyslogIdentifier=helloexample时的输出
#Feb 07 14:22:39 i-rcaex55q systemd[1]: Starting A test program...
#Feb 07 14:22:39 i-rcaex55q helloexample[27419]: /usr/local/bin/hello
#Feb 07 14:22:39 i-rcaex55q helloexample[27423]: start hello success.
#Feb 07 14:22:39 i-rcaex55q helloexample[27422]: This is hello program!
#Feb 07 14:22:39 i-rcaex55q helloexample[27425]: stop hello
#Feb 07 14:22:39 i-rcaex55q systemd[1]: Started A test program.
#Feb 07 14:30:16 i-rcaex55q systemd[1]: Stopped A test program.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codeship.com/running-node-js-linux-systemd/&#34;&gt;Running node.js with systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-deploy-node-js-applications-using-systemd-and-nginx&#34;&gt;Node.js systemd &amp;amp; nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html&#34;&gt;Systemd 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Systemd&#34;&gt;Archlinux Systemd介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gitlab安装</title>
      <link>http://dmdgeeker.com/2016/10/08/gitlab%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 08 Oct 2016 12:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/10/08/gitlab%E5%AE%89%E8%A3%85/</guid>
      <description>

&lt;h3 id=&#34;安装环境配置&#34;&gt;安装环境配置&lt;/h3&gt;

&lt;p&gt;环境配置参见&lt;a href=&#34;https://github.com/gitlabhq/gitlabhq#software-stack&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu/Debian/CentOS/RHEL&lt;/li&gt;
&lt;li&gt;Ruby (MRI) 2.3&lt;/li&gt;
&lt;li&gt;Git 2.7.4+&lt;/li&gt;
&lt;li&gt;Redis 2.8+&lt;/li&gt;
&lt;li&gt;MySQL or PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装相关依赖&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install curl openssh-server ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;添加&lt;code&gt;gitlab-ce&lt;/code&gt;到apt仓库中并安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
sudo apt-get install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置并启动Gitlab，配置文件位于(&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;安装详解&#34;&gt;安装详解&lt;/h4&gt;

&lt;p&gt;在上面的安装步骤中，它自动化的安装了&lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;Nginx&lt;/code&gt;等软件。&lt;/p&gt;

&lt;h3 id=&#34;配置相关&#34;&gt;配置相关&lt;/h3&gt;

&lt;p&gt;配置文件位于&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;中，所有配置都在些进行修改，然后执行&lt;code&gt;reconfigure&lt;/code&gt;命名即可生效。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;邮件SMTP配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# gitlab_rails[&#39;smtp_enable&#39;] = true
# gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.server&amp;quot;
# gitlab_rails[&#39;smtp_port&#39;] = 465
# gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;smtp user&amp;quot;
# gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;smtp password&amp;quot;
# gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;example.com&amp;quot;
# gitlab_rails[&#39;smtp_authentication&#39;] = &amp;quot;login&amp;quot;
# gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true
# gitlab_rails[&#39;smtp_tls&#39;] = false
# gitlab_rails[&#39;smtp_openssl_verify_mode&#39;] = &#39;none&#39; # Can be: &#39;none&#39;, &#39;peer&#39;, &#39;client_once&#39;, &#39;fail_if_no_peer_cert&#39;, see http://api.rubyonrails.org/classes/ActionMailer/Base.html
# gitlab_rails[&#39;smtp_ca_path&#39;] = &amp;quot;/etc/ssl/certs&amp;quot;
# gitlab_rails[&#39;smtp_ca_file&#39;] = &amp;quot;/etc/ssl/certs/ca-certificates.crt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上面的注释符号&lt;code&gt;#&lt;/code&gt;去掉，并填写相应的值即可。参见&lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md&#34;&gt;SMTP配置&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;认证LDAP配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gitlab_rails[&#39;ldap_enabled&#39;] = true
gitlab_rails[&#39;ldap_servers&#39;] = YAML.load &amp;lt;&amp;lt;-&#39;EOS&#39; # remember to close this block with &#39;EOS&#39; below
main: # &#39;main&#39; is the GitLab &#39;provider ID&#39; of this LDAP server
label: &#39;Authenticate&#39;
host: &#39;ldap.example.com&#39;
port: 389
uid: &#39;uid&#39;
method: &#39;plain&#39; # &amp;quot;tls&amp;quot; or &amp;quot;ssl&amp;quot; or &amp;quot;plain&amp;quot;
bind_dn: &#39;uid=root,dc=example,dc=com&#39;
password: &#39;123456789&#39;
active_directory: false
allow_username_or_email_login: false
block_auto_created_users: false
base: &#39;&#39;
user_filter: &#39;&#39;
attributes:
  username: [&#39;uid&#39;, &#39;username&#39;, &#39;sAMAccountName&#39;]
  email:    [&#39;mail&#39;, &#39;email&#39;, &#39;userPrincipalName&#39;]
  name:       &#39;displayName&#39;
  first_name: &#39;cn&#39;
  last_name:  &#39;sn&#39;
EOS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照上面的配置，进行相应的修改即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据库配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# gitlab_rails[&#39;db_adapter&#39;] = &amp;quot;postgresql&amp;quot;
# gitlab_rails[&#39;db_encoding&#39;] = &amp;quot;unicode&amp;quot;
# gitlab_rails[&#39;db_collation&#39;] = nil
# gitlab_rails[&#39;db_database&#39;] = &amp;quot;gitlabhq_production&amp;quot;
# gitlab_rails[&#39;db_pool&#39;] = 10
# gitlab_rails[&#39;db_username&#39;] = &amp;quot;gitlab&amp;quot;
# gitlab_rails[&#39;db_password&#39;] = nil
# gitlab_rails[&#39;db_host&#39;] = nil
# gitlab_rails[&#39;db_port&#39;] = 5432
# gitlab_rails[&#39;db_socket&#39;] = nil
# gitlab_rails[&#39;db_sslmode&#39;] = nil
# gitlab_rails[&#39;db_sslrootcert&#39;] = nil
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redis配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;## Redis TCP connection
# gitlab_rails[&#39;redis_host&#39;] = &amp;quot;127.0.0.1&amp;quot;
# gitlab_rails[&#39;redis_port&#39;] = 6379
# gitlab_rails[&#39;redis_password&#39;] = nil
# gitlab_rails[&#39;redis_database&#39;] = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多配置请查看&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;这个文件。&lt;/p&gt;

&lt;h2 id=&#34;使用docker进行gitlab安装&#34;&gt;使用docker进行Gitlab安装&lt;/h2&gt;

&lt;p&gt;待续&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/doc/settings&#34;&gt;Gitlab配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/&#34;&gt;Gitlab清华大学镜像站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/downloads/#ubuntu1604&#34;&gt;Gitlab下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ce/administration/auth/ldap.html&#34;&gt;Gitlab LDAP配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Markdown 语法</title>
      <link>http://dmdgeeker.com/2016/09/24/markdown-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 24 Sep 2016 14:36:06 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/09/24/markdown-%E8%AF%AD%E6%B3%95/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; 在用于写简单文本非常方便。在这里将给出一些示例来示范Markdown所支持的标记语法。
这里并没有介绍所有Markdown文档，如果你需要完整版来进行深入了解，请查看&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;这个网站。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#强调&#34;&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#删除&#34;&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代码&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#链接&#34;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#图像&#34;&gt;图像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#标题&#34;&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#段落&#34;&gt;段落&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#引用&#34;&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列表&#34;&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#表格&#34;&gt;表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代码高亮&#34;&gt;代码高亮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#水平分隔线&#34;&gt;水平分隔线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;强调&#34;&gt;强调&lt;/h2&gt;

&lt;p&gt;Markdown 通过 * (星号) 和 _ (下划线) 来作为着重表示的标记。 如下所示：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;单个星号&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;单个下划线&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;两个星号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;两个下划线&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;示例代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*单个星号*

_单个下划线_

**两个星号**

__两个下划线__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须使用相同的标记来开关标记块。&lt;/p&gt;

&lt;p&gt;某些情况下，强调可以只是放置于词中间(如he*ll*o), 如Github等。但也有一些不会渲染出效果，如本博客所示。
但是如果在 * 和 _ 两边加上空格，那它会以普通文本形式进行渲染。 如果有需要, 你也可以在星号和下划线前加入反斜线进行转译。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*这段文本在普通星号之间\*
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;删除&#34;&gt;删除&lt;/h2&gt;

&lt;p&gt;删除标记使用的是&lt;code&gt;~~&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;del&gt;这是待删除的文本&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;示例代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~这是待删除的文本~~
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;`&lt;/code&gt;(反引号)来表示行内代码，与格式化代码块不同，行内代码表示其在一行中，如：&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;printf()&lt;/code&gt;函数。&lt;/p&gt;

&lt;p&gt;示例代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;使用 `printf()` 函数。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想在代码中使用反引号，可以使用多个反引号作为开闭标记。
&lt;code&gt;这是一个普通的(`)反引号.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``这是一个普通的(`)反引号.``
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;

&lt;p&gt;Markdown支持内联和引用链接，这两种方式的链接名都放在方括号(&lt;code&gt;[]&lt;/code&gt;)中。&lt;/p&gt;

&lt;p&gt;创建一个链接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[链接名](链接地址)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个Github链接&lt;a href=&#34;https://github.com&#34; title=&#34;可选的链接标题&#34;&gt;Github&lt;/a&gt;如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Github](https://github.com &amp;quot;可选的链接标题&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用链接第二部份也是使用方括号，里面放置一个引用链接的标签。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个[示例][example]引用链接。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下:
这是一个&lt;a href=&#34;http://example.com/&#34; title=&#34;可选的标题&#34;&gt;示例&lt;/a&gt;引用链接。&lt;/p&gt;

&lt;p&gt;在文档的其它地方（通常是文尾）放置一个标签定义:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[example]: http://example.com/  &amp;quot;可选的标题&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接这一部份还有很多细节，具体详情可以参见&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax#link&#34;&gt;链接说明&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;图像&#34;&gt;图像&lt;/h2&gt;

&lt;p&gt;在Markdown里引用一张图片与一个链接非常类似，也如链接一样有两种方式。其它链接不同的是，在语法前加了一个&lt;code&gt;!&lt;/code&gt;（感叹号)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.addictedtoibiza.com/wp-content/uploads/2012/12/example.png&#34; alt=&#34;图片标题&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![图片标题](http://www.addictedtoibiza.com/wp-content/uploads/2012/12/example.png)
![图片标题](http://www.addictedtoibiza.com/wp-content/uploads/2012/12/example.png &amp;quot;可选标题&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;标题&#34;&gt;标题&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax#header&#34;&gt;标准文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;Atx&lt;/code&gt;方式标记标题&lt;/p&gt;

&lt;h1 id=&#34;一级标题&#34;&gt;一级标题&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# 一级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;## 二级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;三级标题&#34;&gt;三级标题&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;### 三级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;四级标题&#34;&gt;四级标题&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#### 四级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;五级标题&#34;&gt;五级标题&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;##### 五级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;六级标题&#34;&gt;六级标题&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;###### 六级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以使用&lt;code&gt;Setext&lt;/code&gt;方式来标记标题.&lt;/p&gt;

&lt;h1 id=&#34;一级标题-使用-号&#34;&gt;一级标题(使用=号)&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;一级标题(使用=号)
==============================
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;二级标题-使用-号&#34;&gt;二级标题(使用-号)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;二级标题(使用-号)
-----------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;段落&#34;&gt;段落&lt;/h2&gt;

&lt;p&gt;Markdown文本段落之间通过空行进行分隔， 直接回车换行不会产生一个新的段落， 上下两行中间不加空行会连接成一个段落。&lt;/p&gt;

&lt;p&gt;这是一个段落&lt;/p&gt;

&lt;p&gt;这是另外一个段落&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个段落

这是另外一个段落
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你只是想进行换行而不是需要一个段落，可以在一行结尾处添加两个以上的空格。&lt;/p&gt;

&lt;p&gt;这是一行结尾。&lt;br /&gt;
这行接着上一行。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一行结尾。[空格][空格]
这行接着上一行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要使用空格或者tab来缩进段落。&lt;/p&gt;

&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;

&lt;p&gt;Markdown使用&lt;code&gt;&amp;gt;&lt;/code&gt;来标记引用, 在每一行引用前添加&lt;code&gt;&amp;gt;&lt;/code&gt;符号。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是一个引用，它有两个段落。&lt;/p&gt;

&lt;p&gt;这是第二个段落。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 这是一个引用，它有两个段落。
&amp;gt;
&amp;gt; 这是第二个段落。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用还可以嵌套使用，如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是外面的引用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这是里面的引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是外面的引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 这是外面的引用
&amp;gt;
&amp;gt; &amp;gt; 这是里面的引用
&amp;gt;
&amp;gt; 这是外面的引用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用中也可以使用其它Markdown的标记，如标题、列表、代码块等。&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;这是一个标题&#34;&gt;这是一个标题&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;这是有序列表的第一行&lt;/li&gt;
&lt;li&gt;这是有序列表的第二行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;引用内放置代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ## 这是一个标题
&amp;gt;
&amp;gt; 1. 这是有序列表的第一行
&amp;gt; 2. 这是有序列表的第二行
&amp;gt;
&amp;gt; 引用内放置代码:
&amp;gt;
&amp;gt;     return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;

&lt;p&gt;Markdown支持有序和无序列表。&lt;/p&gt;

&lt;p&gt;列表项标记位于列表左边，后面至少有一个空格或者一个tab。&lt;/p&gt;

&lt;p&gt;无序列表可以使用&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;或者&lt;code&gt;-&lt;/code&gt;作为列表项标记，你也可以混用它们。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Red
+ Green
- Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有序列表使用一个数字后跟一个小数点(.)来作为列表项标记，注意，数字可以是任意的，如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;li&gt;第三行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 第一行
1. 第二行
1. 第三行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意 从上面可以看出，列表第几行与前面数字并无关系，只需要是个数字即可，最终显示的数字以实际在第几行来定。 但是一般来说，使用有序的数字让人容易理解。&lt;/p&gt;

&lt;p&gt;列表也是可以嵌套的，每一级嵌套列表必须使用4个空格或者一个tab。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无序列表第三行，以&lt;code&gt;*&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;无序列表第三行，以&lt;code&gt;+&lt;/code&gt;开始

&lt;ul&gt;
&lt;li&gt;这是嵌套的无序列表第一行，使用了4个空格进行缩进&lt;/li&gt;
&lt;li&gt;这是嵌套的无序列表第二行，使用了一次tab进行缩进&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无序列表第三行，以&lt;code&gt;-&lt;/code&gt;开始&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这是嵌套的有序列表第一行，使用了4个空格进行缩进

&lt;ol&gt;
&lt;li&gt;这是嵌套的有序列表中嵌套的有序列表第一行，以8个空格缩进&lt;/li&gt;
&lt;li&gt;这是嵌套的有序列表中嵌套的有序列表第二行，使用了一次tab加4个空格缩进&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这是嵌套的有序列表第二行，使用了一次tab进行缩进&lt;/p&gt;

&lt;p&gt;这是第一个嵌套段落，使用了两次tab进行缩进，上下有空行&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这是嵌套的有序列表中嵌套的无序列表第一行，使用了一次tab加4个空格缩进&lt;/li&gt;
&lt;li&gt;这是嵌套的有序列表中嵌套的无序列表第二行，使用了两次tab缩进&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是第一个嵌套段落，使用了一次tab加4个空格进行缩进，上下有空行&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这是嵌套的有序列表第三行，使用了一次tab进行缩进&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 无序列表第三行，以`*`开始
+ 无序列表第三行，以`+`开始
	* 这是嵌套的无序列表第一行，使用了4个空格进行缩进
	* 这是嵌套的无序列表第二行，使用了一次tab进行缩进
- 无序列表第三行，以`-`开始
    1. 这是嵌套的有序列表第一行，使用了4个空格进行缩进
        1. 这是嵌套的有序列表中嵌套的有序列表第一行，以8个空格缩进
	    1. 这是嵌套的有序列表中嵌套的有序列表第二行，使用了一次tab加4个空格缩进
	1. 这是嵌套的有序列表第二行，使用了一次tab进行缩进

		这是第一个嵌套段落，使用了两次tab进行缩进，上下有空行

	    * 这是嵌套的有序列表中嵌套的无序列表第一行，使用了一次tab加4个空格缩进
		* 这是嵌套的有序列表中嵌套的无序列表第二行，使用了两次tab缩进

	    这是第一个嵌套段落，使用了一次tab加4个空格进行缩进，上下有空行

	1. 这是嵌套的有序列表第三行，使用了一次tab进行缩进
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以在列表中嵌套一个引用块。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里是内嵌的引用块，前面有一个空行，使用了一次tab缩进&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二行&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三行&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 第一行

	&amp;gt; 这里是内嵌的引用块，前面有一个空行，使用了一次tab缩进
1. 第二行
1. 第三行
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;列表第一项&lt;/p&gt;

&lt;p&gt;内嵌段落，以4个空格缩进，前后有空行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是内嵌的代码块，以8个空格缩进，前后有空行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内嵌段落，使用一次tab缩进，前后有空行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是内嵌的代码块，使用两次tab缩进，前后有空行!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;列表第二项&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;列表第三项&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 列表第一项

    内嵌段落，以4个空格缩进，前后有空行:

        这是内嵌的代码块，以8个空格缩进，前后有空行。

	内嵌段落，使用一次tab缩进，前后有空行:

		这是内嵌的代码块，使用两次tab缩进，前后有空行!

* 列表第二项
* 列表第三项
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;

&lt;p&gt;表格标记是使用&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;|&lt;/code&gt;这两个符号。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表头第一列&lt;/th&gt;
&lt;th&gt;表头第二列&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;表格第一行第一列&lt;/td&gt;
&lt;td&gt;表格第一行第二列&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;表格第二行第一列&lt;/td&gt;
&lt;td&gt;表格第二行第二列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;表头第一列 | 表头第二列
------------- | -------------
表格第一行第一列  | 表格第一行第二列
表格第二行第一列  | 表格第二行第二列
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在某些Markdown实现(如GFM)中，你还可以通过:来实现对齐(此处因博客Markdown解析器不支持，故未能正确显示)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Right&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Computer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$1600&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;one&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Phone&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;three&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;Pipe&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;eleven&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Right     | Left   | Center
---------:| :----- |:-----:
Computer  |  $1600 | one
Phone     |    $12 | three
Pipe      |     $1 | eleven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以在表格中使用Markdown支持的内联标记:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the &lt;strong&gt;help&lt;/strong&gt; window.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Destroy your computer!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| Function name | Description                    |
| ------------- | ------------------------------ |
| `help()`      | Display the __help__ window.   |
| `destroy()`   | **Destroy your computer!**     |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;代码高亮&#34;&gt;代码高亮&lt;/h2&gt;

&lt;p&gt;在标准的Markdown实现中，代码块通过缩进(tab或者4个空格)来控制。
直到它遇到一行没有缩进的行(忽略中间的空行)或者文档末尾为止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    这是代码块第一行，使用了两次tab进行缩进:

        这是代码块第二行，使用了三次tab进行缩进，上面有一行空行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[tab][tab]这是代码块第一行，使用了两次tab进行缩进:

[tab][tab][tab]这是代码块第二行，使用了三次tab进行缩进，上面有一行空行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你需要进行代码高亮，可以使用&lt;code&gt;```&lt;/code&gt;或者&lt;code&gt;~~~&lt;/code&gt;将代码块包括进来。&lt;br /&gt;
注意：代码高亮不是Markdown标准的一部份，在不同实现中可能会有不同的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = 3;
var b = function () {
    var c = &#39;hello&#39;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```js
var a = 3;
var b = function () {
    var c = &#39;hello&#39;;
};
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;~~~~&lt;/code&gt;如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = 3;
var b = function () {
    var c = &#39;hello&#39;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~~~
var a = 3;
var b = function () {
    var c = &#39;hello&#39;;
};
~~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;水平分隔线&#34;&gt;水平分隔线&lt;/h2&gt;

&lt;p&gt;水平分隔线可以是以下几种形式。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * *

***

*****

- - - -

-----------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt; 本文翻译改编自&lt;a href=&#34;https://bitbucket.org/tutorials/markdowndemo&#34;&gt;Bitbucket markdowndemo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>两步验证(2-step verification)</title>
      <link>http://dmdgeeker.com/2016/08/28/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%812-step-verification/</link>
      <pubDate>Sun, 28 Aug 2016 14:36:06 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/2016/08/28/%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%812-step-verification/</guid>
      <description>

&lt;h3 id=&#34;关于两步验证&#34;&gt;关于两步验证&lt;/h3&gt;

&lt;p&gt;两步验证是一种安全措施，用于保护某些资源不被泄露，即使在泄露了密码的情况下。
两步验证有多种方式，主要包括：短信、验证器、电话等方式。本文主要讲述验证器方式的两步验证。&lt;/p&gt;

&lt;h3 id=&#34;工作原理&#34;&gt;工作原理&lt;/h3&gt;

&lt;p&gt;使用基于验证器方式的两步验证通常需要另外一部设备（通常是手机，也可能是其它硬件）。
用户在登录系统时，除了输入正常的密码外，还需要输入一个动态生成的密码。
此动态密码由另外一部可信设备提供，具有一个较短的时效性，保证不会重回攻击。&lt;/p&gt;

&lt;p&gt;动态密码生成通常有两种算法：TOTP与HOTP。&lt;/p&gt;

&lt;p&gt;TOTP(Time-Based One-Time Password)是指基于时间的一次性密码。&lt;br /&gt;
HOTP(HMAC-based One-time Password)是指基于计数的一次性密码。&lt;/p&gt;

&lt;p&gt;安全令牌硬件（如某些银行的动态密保，游戏账号的密码令牌）通常是基于HOTP方式实现。
其表现为使用专有硬件，为某一特定产品或系统服务。&lt;/p&gt;

&lt;p&gt;而当前大多数两步验证使用的是TOTP方式实现，比如Google Authenticator。&lt;/p&gt;

&lt;h3 id=&#34;totp流程&#34;&gt;TOTP流程&lt;/h3&gt;

&lt;p&gt;基于TOTP的两步验证流程一般通过需要先绑定，然后随用随验证。&lt;/p&gt;

&lt;p&gt;现假设有一系统&lt;code&gt;S&lt;/code&gt;，用户&lt;code&gt;A&lt;/code&gt;进行两步验证&lt;/p&gt;

&lt;p&gt;绑定流程一般如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户&lt;code&gt;A&lt;/code&gt;注册/登录系统&lt;code&gt;S&lt;/code&gt;后，&lt;code&gt;S&lt;/code&gt;后台生成一个OTP链接，在前端生成并显示该链接的二维码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用户&lt;code&gt;A&lt;/code&gt;用手机通过Google Authenticator之类的验证器&lt;code&gt;G&lt;/code&gt;扫描二维码进行绑定&lt;/li&gt;
&lt;li&gt;验证器&lt;code&gt;G&lt;/code&gt;会生成动态密码&lt;code&gt;C&lt;/code&gt;，用户&lt;code&gt;A&lt;/code&gt;将动态密码&lt;code&gt;C&lt;/code&gt;输入到系统&lt;code&gt;S&lt;/code&gt;的绑定验证框内&lt;/li&gt;
&lt;li&gt;如果系统&lt;code&gt;S&lt;/code&gt;后台验证该动态密码&lt;code&gt;C&lt;/code&gt;成功，则系统&lt;code&gt;S&lt;/code&gt;与验证器&lt;code&gt;G&lt;/code&gt;绑定成功。否则，绑定失败。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://dmdgeeker.com/images/2step-verification-bind.png&#34; alt=&#34;示意图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;验证流程如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户&lt;code&gt;A&lt;/code&gt;通过账号密码登录系统&lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;系统&lt;code&gt;S&lt;/code&gt;验证账号和密码匹配后，跳转到两步验证页面&lt;/li&gt;
&lt;li&gt;用户&lt;code&gt;A&lt;/code&gt;将验证器&lt;code&gt;G&lt;/code&gt;里的动态验证码&lt;code&gt;C&lt;/code&gt;输入到两步验证页面的验证框中&lt;/li&gt;
&lt;li&gt;系统&lt;code&gt;S&lt;/code&gt;对验证码&lt;code&gt;C&lt;/code&gt;进行验证，如果成功，如登录成功，否则失败&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;totp实现&#34;&gt;TOTP实现&lt;/h3&gt;

&lt;p&gt;可以按照上面所述流程，一步步来进行实现。
下面主要介绍几个关键部份。&lt;/p&gt;

&lt;h4 id=&#34;otp链接&#34;&gt;OTP链接&lt;/h4&gt;

&lt;p&gt;OTP链接格式: &lt;code&gt;otpauth://TYPE/LABEL?PARAMETERS&lt;/code&gt;。
具体可参考&lt;a href=&#34;https://github.com/google/google-authenticator/wiki/Key-Uri-Format&#34;&gt;Google Authenticator URI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例：&lt;code&gt;otpauth://totp/Google:alice@google.com?secret=JBSWY3DPEHPK3PXP&amp;amp;issuer=Google&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中，前面一段&lt;code&gt;otpauth://totp/Example:alice@google.com&lt;/code&gt;中各部份的意义如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;otpauth&lt;/code&gt;表示OTP认证协议&lt;/li&gt;
&lt;li&gt;&lt;code&gt;totp&lt;/code&gt;表示使用TOTP算法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google&lt;/code&gt;表示生成此链接的公司或软件名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alice@google.com&lt;/code&gt;表示该链接所对应的用户的用户名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而后面一段查询参数中各部份意义如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;secret&lt;/code&gt;是由服务端&lt;strong&gt;Base32&lt;/strong&gt;编码生成的字符串。其内容不重要，只要保证随机性即可，应保证每个用户都拥有一个独立的&lt;code&gt;secret&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;issuer&lt;/code&gt;表示生成此链接的公司或软件名称，应与前一段中相应部份一致。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;动态验证码生成&#34;&gt;动态验证码生成&lt;/h4&gt;

&lt;p&gt;动态验证码的生成算法是公开的，可以到此处进行查处：&lt;a href=&#34;https://tools.ietf.org/html/rfc6238&#34;&gt;RFC6238&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面给出Go语言版本示例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 6位数字动态验证码
var digits = 6

// secret 即为otpauth链接中的secret
// timeValue 为当前unix时间除以验证码失效时间（通常为30s）
func computeCode(secret string, timeValue int64) string {
	key, err := base32.StdEncoding.DecodeString(secret)
	if err != nil {
		return &amp;quot;&amp;quot;
	}

	hash := hmac.New(sha1.New, key)
	err = binary.Write(hash, binary.BigEndian, timeValue)
	if err != nil {
		return &amp;quot;&amp;quot;
	}
	h := hash.Sum(nil)

	offset := h[len(h)-1] &amp;amp; 0x0f
	val := ((int(h[offset]) &amp;amp; 0x7f) &amp;lt;&amp;lt; 24) |
         ((int(h[offset+1] &amp;amp; 0xff)) &amp;lt;&amp;lt; 16) |
         ((int(h[offset+2] &amp;amp; 0xff)) &amp;lt;&amp;lt; 8) |
         (int(h[offset+3]) &amp;amp; 0xff)
	otp := int64(val) % int64(math.Pow10(digits))
	code := fmt.Sprintf(fmt.Sprintf(&amp;quot;%%0%dd&amp;quot;, digits), otp)
	return code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;两步验证的优缺点&#34;&gt;两步验证的优缺点&lt;/h3&gt;

&lt;p&gt;两步验证的优点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;系统的安全性提高，即使其它网站泄露了用户的明文密码，仍可以保证用户账户不受攻击。&lt;/li&gt;
&lt;li&gt;动态按时间生成验证码，防止重放攻击。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两步验证的缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;复杂度提高。用户不仅需要输入密码，还需要输入动态验证码。&lt;/li&gt;
&lt;li&gt;需要另一个可信设备。即默认用户在绑定时候所使用的设备是安全的。&lt;/li&gt;
&lt;li&gt;当验证器不可用时（设备丢失或不在身边），无法登录。&lt;/li&gt;
&lt;li&gt;适合web端登录，不适合移动应用登录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;其它验证方式&#34;&gt;其它验证方式&lt;/h3&gt;

&lt;p&gt;一、短信认证&lt;br /&gt;
短信验证码方式可能是当前中国各大厂商用得最多的一种验证方式。
在用户绑定某个手机号后，将用户与此手机号关联。在有需要进行二次验证的地方，
发送二次验证码短信，用户接收短信并输入该验证码。&lt;/p&gt;

&lt;p&gt;二、扫码认证&lt;br /&gt;
这在微信登录桌面端与web端的唯一方式。
如果你在桌面web端使用支付宝，通常也可以通过手机支付宝扫页面上二维码进行支付确认。&lt;/p&gt;

&lt;p&gt;三、推送认证&lt;br /&gt;
当微信桌面端已登录过，保存有信息时，通常会推送一条登录请求给手机微信端，需要在手机端确认。&lt;/p&gt;

&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/landing/2step/&#34;&gt;Google 两步验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT204152&#34;&gt;Apple 两步验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/HT204915&#34;&gt;Apple 双重认证&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>