<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on X blog</title>
    <link>http://dmdgeeker.com/topics/devops/</link>
    <description>Recent content in Devops on X blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Sun, 20 Aug 2017 22:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://dmdgeeker.com/topics/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K8S系列-Minikube使用简介</title>
      <link>http://dmdgeeker.com/post/minikube-usage/</link>
      <pubDate>Sun, 20 Aug 2017 22:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/minikube-usage/</guid>
      <description>关于 Minikube Minikube 相当于一个运行在你开发电脑上的微型 Kubernetes， 它拥有大部份的标准 Kubernetes 特性，但是运行在你个人电脑上，而不是在一个几十几百台机器的集群中。
Minikube 安装流程 Minikube 在个人电脑上运行时，需要一个虚拟驱动层如 VirtualBox、xhyve、VMWARE、KVM、Hyper-V 等（只需要一种即可）。 本人在 macOS 上，选用的是 VirtualBox 虚拟机。
 安装 VirtualBox 虚拟机 安装 Minikube
brew cask install minikube  安装 Kubectl
brew install kubernetes-cli   配置与启动 Minikube 由于 Kubernetes 是 Google 公司员工开源维护的，所以其所依赖的一些镜像位于 Google 的公有仓库中。 由于一些众所周知的原因，在国内访问基本不可用，所以需要自备梯子（代理服务器）。
如果你没有梯子以及类似东西的话，基本无法进一步使用下去，可以弃坑了。
如果你使用了一个本地代理，其提供了HTTP代理服务，监听地址如：0.0.0.0:7087。你可以这样启动 Minikube :
 查看 VirtualBox 的网关IP地址
ifconfig -a # 输出中会有一块包含着 VirtualBox 网关地址，如下所示 # # vboxnet2: flags=8943&amp;lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&amp;gt; mtu 1500 # ether 0a:00:27:00:00:02 # inet 192.</description>
    </item>
    
    <item>
      <title>火焰图性能分析</title>
      <link>http://dmdgeeker.com/post/flamegraph/</link>
      <pubDate>Sun, 09 Jul 2017 20:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>http://dmdgeeker.com/post/flamegraph/</guid>
      <description>前言 应用程序性能一直是软件开发过程中一个很重要的话题，性能的好坏不仅会直接影响到所消耗的资源和投入的金钱， 而且会直接影响到用户的使用体验，从而间接影响一款产品的生命周期。
在软件开发过程中，一般会使用多种手段来量化性能、追踪性能问题等。比如使用ab及wrk等工具来压测网络应用，使用Zipkin或Opentracing等跟踪性能问题，使用日志来定位性能问题，使用gdb等工具调试性能问题。
而火焰图是一个可以让你直观了解性能问题的方式，最终一般会生成一张SVG格式的图片，你可以会方便地进行缩放以及进一步查看局部区域，如下所示。 关于火焰图 生成火焰图，需要经历采集、转化、渲染等多个步骤，不同步骤需要用到不同的工具。
首先，我们需要进行性能数据采集。只有收集到足够的数据后，才能进行相应的分析。 性能采集工具不同操作系统各有不同，在Linux操作系统中常用的有Perf和Systemtap这两种工具。
在采集到数据后，需要对数据进行处理，以获得相应格式化的数据。 使用FlameGraph可以对这两种工具采集来的数据进行处理，生成可以渲染的数据。 同时，FlameGraph也可以将处理完成的数据生成SVG图片，以供仔细分析。
Openresty应用作者在使用火焰图过程中，总结出了一套相应的性能采集工具集Openresty systemtap toolkit，来采集各种不同类型的性能数据。
采集性能数据的类型有几种，主要是下面几种：
 On CPU 当CPU占用率比较高时使用 Off CPU 当CPU占用率并不高，性能瓶颈位于IO或者锁等地方时使用 Memory 当可能出现内存泄露时使用 Hot/Cold 试验性质，联合CPU的两种类型，相当于On CPU + Off CPU  使用Perf采集数据 perf是Linux系统下的一个性能采集工具，只能用于Linux系统。更详细的perf使用方法，请参考 perf Examples。
 安装perf工具
 Ubuntu 16.04
sudo apt install -y linux-tools-`uname -r`  CentOS 7
sudo yum install perf    运行perf --help命令，如果出现类似下面的提示
WARNING: perf not found for kernel 4.4.0-81 You may need to install the following packages for this specific kernel: linux-tools-4.</description>
    </item>
    
  </channel>
</rss>