<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 随笔小记</title>
    <link>https://ifun.dev/topics/golang/</link>
    <description>Recent content in golang on 随笔小记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xheavey@gmail.com (Allen Heavey)</managingEditor>
    <webMaster>xheavey@gmail.com (Allen Heavey)</webMaster>
    <copyright>(c) 2016-2017 Allen Heavey.</copyright>
    <lastBuildDate>Sun, 28 May 2017 11:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://ifun.dev/topics/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 语言之信号量</title>
      <link>https://ifun.dev/post/golang-signal/</link>
      <pubDate>Sun, 28 May 2017 11:00:00 +0800</pubDate>
      <author>xheavey@gmail.com (Allen Heavey)</author>
      <guid>https://ifun.dev/post/golang-signal/</guid>
      <description>Go 信号 Go 语言中的信号量主要是用于Unix/Linux系统，但是也部份兼容Windows。 在标准库中，主要涉及到os/signal和syscall这两个包。
其中，os/signal包主要是提供信号操作函数，而syscall里定义了许多信号常量。
简单示例 这里先看一段简短的代码：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; ) func main() { c := make(chan os.Signal, 1) signal.Notify(c, os.Interrupt) // Block until a signal is received. s := &amp;lt;-c fmt.Println(&amp;quot;Got signal:&amp;quot;, s) // Got signal: interrupt }  这里是Golang文档中的一个示例，程序会捕获os.Interrupt信号，也就是syscall.SIGINT信号。 当捕获到这个信号后，将其打印出来。运行这个示例时，按Ctrl+C中断程序运行，即可看到输出。
用法详解 在os/signal包中，主要有以下几个函数：
// 忽略某个或某几个信号 func Ignore(sig ...os.Signal) // 注册接收某个或某几个信号 func Notify(c chan&amp;lt;- os.Signal, sig ...os.Signal) // 重置一个或多个信号处理，如果参数为空，则重置所有信号处理 func Reset(sig ...os.Signal) // 停止接收信号 func Stop(c chan&amp;lt;- os.</description>
    </item>
    
  </channel>
</rss>